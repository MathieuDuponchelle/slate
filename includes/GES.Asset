<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GES">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="ges.asset">GES.Asset</h2>

<p>The Assets in the GStreamer Editing Services represent the resources
that can be used. You can create assets for any type that implements the <a href="#ges.extractable">GES.Extractable</a>
interface, for example <a href="#ges.clip">GES.Clips</a>, <a href="#ges.formatter">GES.Formatter</a>, and <a href="#ges.trackelement">GES.TrackElement</a> do implement it.
This means that assets will represent for example a <a href="#ges.uriclip">GES.UriClips</a>, <a href="#ges.baseeffect">GES.BaseEffect</a> etc,
and then you can extract objects of those types with the appropriate parameters from the asset
using the (FIXME broken link)ges_asset_extract method:</p>
<pre><code class="highlight c"><span class="n">GESAsset</span> <span class="o">*</span><span class="n">effect_asset</span><span class="p">;</span>
<span class="n">GESEffect</span> <span class="o">*</span><span class="n">effect</span><span class="p">;</span>

<span class="c1">// You create an asset for an effect
</span><span class="n">effect_asset</span> <span class="o">=</span> <span class="n">ges_asset_request</span> <span class="p">(</span><span class="n">GES_TYPE_EFFECT</span><span class="p">,</span> <span class="s">"agingtv"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

<span class="c1">// And now you can extract an instance of GESEffect from that asset
</span><span class="n">effect</span> <span class="o">=</span> <span class="n">GES_EFFECT</span> <span class="p">(</span><span class="n">ges_asset_extract</span> <span class="p">(</span><span class="n">effect_asset</span><span class="p">));</span>


</code></pre>

<p>In that example, the advantages of having a <a href="#ges.asset">GES.Asset</a> are that you can know what effects
you are working with and let your user know about the avalaible ones, you can add metadata
to the <a href="#ges.asset">GES.Asset</a> through the <a href="#ges.metacontainer">GES.MetaContainer</a> interface and you have a model for your
custom effects. Note that <a href="#ges.asset">GES.Asset</a> management is making easier thanks to the <a href="#ges.project">GES.Project</a> class.</p>

<p>Each asset is represented by a pair of @extractable_type and @id (string). Actually the @extractable_type
is the type that implements the <a href="#ges.extractable">GES.Extractable</a> interface, that means that for example for a <a href="#ges.uriclip">GES.UriClip</a>,
the type that implements the <a href="#ges.extractable">GES.Extractable</a> interface is <a href="#ges.clip">GES.Clip</a>.
The identifier represents different things depending on the @extractable_type and you should check
the documentation of each type to know what the ID of <a href="#ges.asset">GES.Asset</a> actually represents for that type. By default,
we only have one <a href="#ges.asset">GES.Asset</a> per type, and the @id is the name of the type, but this behaviour is overriden
to be more useful. For example, for GESTransitionClips, the ID is the vtype of the transition
you will extract from it (ie crossfade, box-wipe-rc etc..) For <a href="#ges.effect">GES.Effect</a> the ID is the
@bin-description property of the extracted objects (ie the gst-launch style description of the bin that
will be used).</p>

<p>Each and every <a href="#ges.asset">GES.Asset</a> is cached into GES, and you can query those with the (FIXME broken link)ges_list_assets function.
Also the system will automatically register <a href="#ges.asset">GES.Assets</a> for <a href="#ges.formatter">GES.Formatters</a> and <a href="#ges.transitionclip">GES.TransitionClips</a>
and standard effects (actually not implemented yet) and you can simply query those calling:</p>

<pre class="inlined_code">
   GList *formatter_assets, *tmp;

   //  List all  the transitions
   formatter_assets = ges_list_assets (GES_TYPE_FORMATTER);

   // Print some infos about the formatter GESAsset
   for (tmp = formatter_assets; tmp; tmp = tmp->next) {
     g_print ("Name of the formatter: %s, file extension it produces: %s",
       ges_meta_container_get_string (GES_META_CONTAINER (tmp->data), GES_META_FORMATTER_NAME),
       ges_meta_container_get_string (GES_META_CONTAINER (tmp->data), GES_META_FORMATTER_EXTENSION));
   }

   g_list_free (transition_assets);

</pre>

<p>You can request the creation of <a href="#ges.asset">GES.Assets</a> using either (FIXME broken link)ges_asset_request_async or
(FIXME broken link)ges_asset_request_async. All the <a href="#ges.asset">GES.Assets</a> are cached and thus any asset that has already
been created can be requested again without overhead.</p>

<h3 id="ges.asset.request_finish">GES.Asset.request_finish</h3>

<p><strong>(res)</strong></p>

<p><em>res</em>: The <a href="https://developer.gnome.org/gio/unstable//GAsyncResult.html">Gio.AsyncResult</a> from which to get the newly created <a href="#ges.asset">GES.Asset</a></p>

<p><em>Returns</em>: The <a href="#ges.asset">GES.Asset</a> previously requested</p>

<p>Finalize the request of an async <a href="#ges.asset">GES.Asset</a></p>

<h3 id="ges.asset.get_id">GES.Asset.get_id</h3>

<p><strong>(self)</strong></p>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a> to get ID from</p>

<p><em>Returns</em>: The ID of <strong>self</strong></p>

<p>Gets the ID of a <a href="#ges.asset">GES.Asset</a></p>

<h3 id="ges.asset.request">GES.Asset.request</h3>

<p><strong>(extractable_type, id)</strong></p>

<p><em>extractable_type</em>: The <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> of the object that can be extracted from the new asset.</p>

<p><em>id</em>: The Identifier or <strong>NULL</strong></p>

<p><em>Returns</em>: A reference to the wanted <a href="#ges.asset">GES.Asset</a> or <strong>NULL</strong></p>

<p>Create a <a href="#ges.asset">GES.Asset</a> in the most simple cases, you should look at the <strong>extractable_type</strong>
documentation to see if that constructor can be called for this particular type</p>

<p>As it is recommanded not to instanciate assets for GESUriClip synchronously,
it will not work with this method, but you can instead use the specific
(FIXME broken link)ges_uri_clip_asset_request_sync method if you really want to.</p>

<h3 id="ges.asset.extract">GES.Asset.extract</h3>

<p><strong>(self)</strong></p>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a> to get extract an object from</p>

<p><em>Returns</em>: A newly created <a href="#ges.extractable">GES.Extractable</a></p>

<p>Extracts a new <a href="https://developer.gnome.org/gobject/unstable//gobject-The-Base-Object-Type.html#GObject">GObject.Object</a> from @asset. The type of the object is
defined by the extractable-type of @asset, you can check what
type will be extracted from @asset using
(FIXME broken link)ges_asset_get_extractable_type</p>

<h3 id="ges.asset.request_async">GES.Asset.request_async</h3>

<p><strong>(extractable_type, id, cancellable, callback, user_data)</strong></p>

<p><em>extractable_type</em>: The <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> of the object that can be extracted from the
   new asset. The class must implement the <a href="#ges.extractable">GES.Extractable</a> interface.</p>

<p><em>id</em>: The Identifier of the asset we want to create. This identifier depends of the extractable,
type you want. By default it is the name of the class itself (or <strong>NULL</strong>), but for example for a
GESEffect, it will be the pipeline description, for a GESUriClip it
will be the name of the file, etc&hellip; You should refer to the documentation of the <a href="#ges.extractable">GES.Extractable</a>
type you want to create a <a href="#ges.asset">GES.Asset</a> for.</p>

<p><em>cancellable</em>: optional %GCancellable object, <strong>NULL</strong> to ignore.</p>

<p><em>callback</em>: a <a href="https://developer.gnome.org/gio/unstable//GAsyncResult.html#GAsyncReadyCallback">Gio.AsyncReadyCallback</a> to call when the initialization is finished,
Note that the @source of the callback will be the <a href="#ges.asset">GES.Asset</a>, but you need to
make sure that the asset is properly loaded using the (FIXME broken link)ges_asset_request_finish
method. This asset can not be used as is.</p>

<p><em>user_data</em>: The user data to pass when <strong>callback</strong> is called</p>

<p><em>Returns</em>: FIXME empty description</p>

<p>Request a new <a href="#ges.asset">GES.Asset</a> asyncronously, <strong>callback</strong> will be called when the materail is
ready to be used or if an error occured.</p>

<p>Example of request of a GESAsset async:</p>

<pre class="inlined_code">
// The request callback
static void
asset_loaded_cb (GESAsset * source, GAsyncResult * res, gpointer user_data)
{
  GESAsset *asset;
  GError *error = NULL;

  asset = ges_asset_request_finish (res, &error);
  if (asset) {
   g_print ("The file: %s is usable as a FileSource",
       ges_asset_get_id (asset));
  } else {
   g_print ("The file: %s is *not* usable as a FileSource because: %s",
       ges_asset_get_id (source), error->message);
  }

  gst_object_unref (mfs);
}

// The request:
ges_asset_request_async (GES_TYPE_URI_CLIP, some_uri, NULL,
   (GAsyncReadyCallback) asset_loaded_cb, user_data);
</pre>

<h3 id="ges.asset.get_extractable_type">GES.Asset.get_extractable_type</h3>

<p><strong>(self)</strong></p>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a></p>

<p><em>Returns</em>: the type of object that can be extracted from <strong>self</strong></p>

<p>Gets the type of object that can be extracted from <strong>self</strong></p>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
