<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GES">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="ges.asset" c_name="GESAsset" python_name="GES.Asset" shell_name="The Asset">GES.Asset</h2>

<p class="graphviz">
<!-- Generated by graphviz version 2.38.0 (20140413.2041) --><!-- Title: %3 Pages: 1 --><svg width="490pt" height="188pt" viewBox="0.00 0.00 490.00 188.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 184)"><title>%3</title><polygon fill="white" stroke="none" points="-4,4 -4,-184 486,-184 486,4 -4,4"/><!-- GObject.GInterface --><g id="node1" class="node"><title>GObject.GInterface</title><g id="a_node1"><a xlink:href="#index" xlink:title="GObject.GInterface"><path fill="none" stroke="black" d="M254,-180C254,-180 154,-180 154,-180 148,-180 142,-174 142,-168 142,-168 142,-156 142,-156 142,-150 148,-144 154,-144 154,-144 254,-144 254,-144 260,-144 266,-150 266,-156 266,-156 266,-168 266,-168 266,-174 260,-180 254,-180"/><text text-anchor="middle" x="204" y="-158.3" font-family="Times,serif" font-size="14.00">GObject.GInterface</text></a></g></g><!-- GES.MetaContainer --><g id="node2" class="node"><title>GES.MetaContainer</title><g id="a_node2"><a xlink:href="#ges.metacontainer" xlink:title="GES.MetaContainer"><path fill="none" stroke="black" d="M116,-108C116,-108 12,-108 12,-108 6,-108 0,-102 0,-96 0,-96 0,-84 0,-84 0,-78 6,-72 12,-72 12,-72 116,-72 116,-72 122,-72 128,-78 128,-84 128,-84 128,-96 128,-96 128,-102 122,-108 116,-108"/><text text-anchor="middle" x="64" y="-86.3" font-family="Times,serif" font-size="14.00">GES.MetaContainer</text></a></g></g><!-- GObject.GInterface&#45;&gt;GES.MetaContainer --><g id="edge1" class="edge"><title>GObject.GInterface&#45;&gt;GES.MetaContainer</title><path fill="none" stroke="black" d="M169.752,-143.876C150.939,-134.469 127.415,-122.708 107.334,-112.667"/><polygon fill="black" stroke="black" points="108.889,-109.531 98.3795,-108.19 105.759,-115.792 108.889,-109.531"/></g><!-- Gio.AsyncInitable --><g id="node3" class="node"><title>Gio.AsyncInitable</title><g id="a_node3"><a xlink:href="https://developer.gnome.org/gio/unstable//GAsyncInitable.html" xlink:title="Gio.AsyncInitable"><path fill="none" stroke="black" d="M250,-108C250,-108 158,-108 158,-108 152,-108 146,-102 146,-96 146,-96 146,-84 146,-84 146,-78 152,-72 158,-72 158,-72 250,-72 250,-72 256,-72 262,-78 262,-84 262,-84 262,-96 262,-96 262,-102 256,-108 250,-108"/><text text-anchor="middle" x="204" y="-86.3" font-family="Times,serif" font-size="14.00">Gio.AsyncInitable</text></a></g></g><!-- GObject.GInterface&#45;&gt;Gio.AsyncInitable --><g id="edge2" class="edge"><title>GObject.GInterface&#45;&gt;Gio.AsyncInitable</title><path fill="none" stroke="black" d="M204,-143.697C204,-135.983 204,-126.712 204,-118.112"/><polygon fill="black" stroke="black" points="207.5,-118.104 204,-108.104 200.5,-118.104 207.5,-118.104"/></g><!-- Gio.Initable --><g id="node4" class="node"><title>Gio.Initable</title><g id="a_node4"><a xlink:href="https://developer.gnome.org/gio/unstable//GInitable.html" xlink:title="Gio.Initable"><path fill="none" stroke="black" d="M350,-108C350,-108 292,-108 292,-108 286,-108 280,-102 280,-96 280,-96 280,-84 280,-84 280,-78 286,-72 292,-72 292,-72 350,-72 350,-72 356,-72 362,-78 362,-84 362,-84 362,-96 362,-96 362,-102 356,-108 350,-108"/><text text-anchor="middle" x="321" y="-86.3" font-family="Times,serif" font-size="14.00">Gio.Initable</text></a></g></g><!-- GObject.GInterface&#45;&gt;Gio.Initable --><g id="edge3" class="edge"><title>GObject.GInterface&#45;&gt;Gio.Initable</title><path fill="none" stroke="black" d="M232.621,-143.876C247.919,-134.724 266.943,-123.342 283.418,-113.485"/><polygon fill="black" stroke="black" points="285.484,-116.327 292.269,-108.19 281.89,-110.32 285.484,-116.327"/></g><!-- GES.Asset --><g id="node5" class="node"><title>GES.Asset</title><g id="a_node5"><a xlink:href="#ges.asset" xlink:title="GES.Asset"><path fill="none" stroke="black" d="M288,-36C288,-36 236,-36 236,-36 230,-36 224,-30 224,-24 224,-24 224,-12 224,-12 224,-6 230,-0 236,-0 236,-0 288,-0 288,-0 294,-0 300,-6 300,-12 300,-12 300,-24 300,-24 300,-30 294,-36 288,-36"/><text text-anchor="middle" x="262" y="-14.3" font-family="Times,serif" font-size="14.00">GES.Asset</text></a></g></g><!-- GES.MetaContainer&#45;&gt;GES.Asset --><g id="edge4" class="edge"><title>GES.MetaContainer&#45;&gt;GES.Asset</title><path fill="none" stroke="black" d="M112.183,-71.9656C143.17,-61.0105 183.271,-46.8336 214.185,-35.9041"/><polygon fill="black" stroke="black" points="215.615,-39.111 223.877,-32.4779 213.282,-32.5113 215.615,-39.111"/></g><!-- Gio.AsyncInitable&#45;&gt;GES.Asset --><g id="edge5" class="edge"><title>Gio.AsyncInitable&#45;&gt;GES.Asset</title><path fill="none" stroke="black" d="M218.337,-71.6966C225.291,-63.3046 233.77,-53.0705 241.401,-43.8613"/><polygon fill="black" stroke="black" points="244.143,-46.0376 247.828,-36.1043 238.753,-41.5715 244.143,-46.0376"/></g><!-- Gio.Initable&#45;&gt;GES.Asset --><g id="edge6" class="edge"><title>Gio.Initable&#45;&gt;GES.Asset</title><path fill="none" stroke="black" d="M306.416,-71.6966C299.342,-63.3046 290.717,-53.0705 282.955,-43.8613"/><polygon fill="black" stroke="black" points="285.537,-41.495 276.417,-36.1043 280.185,-46.0063 285.537,-41.495"/></g><!-- GObject.Object --><g id="node6" class="node"><title>GObject.Object</title><g id="a_node6"><a xlink:href="https://developer.gnome.org/gobject/unstable//gobject-The-Base-Object-Type.html#GObject" xlink:title="GObject.Object"><path fill="none" stroke="black" d="M470,-108C470,-108 392,-108 392,-108 386,-108 380,-102 380,-96 380,-96 380,-84 380,-84 380,-78 386,-72 392,-72 392,-72 470,-72 470,-72 476,-72 482,-78 482,-84 482,-84 482,-96 482,-96 482,-102 476,-108 470,-108"/><text text-anchor="middle" x="431" y="-86.3" font-family="Times,serif" font-size="14.00">GObject.Object</text></a></g></g><!-- GObject.Object&#45;&gt;GES.Asset --><g id="edge7" class="edge"><title>GObject.Object&#45;&gt;GES.Asset</title><path fill="none" stroke="black" d="M389.658,-71.8761C365.396,-61.8268 334.646,-49.0899 309.405,-38.6351"/><polygon fill="black" stroke="black" points="310.604,-35.3435 300.026,-34.7503 307.925,-41.8107 310.604,-35.3435"/></g></g></svg></p>

<p>The Assets in the GStreamer Editing Services represent the resources
that can be used. You can create assets for any type that implements the <a href="#ges.extractable">GES.Extractable</a>
interface, for example <a href="#ges.clip">GES.Clips</a>, <a href="#ges.formatter">GES.Formatter</a>, and <a href="#ges.trackelement">GES.TrackElement</a> do implement it.
This means that assets will represent for example a <a href="#ges.uriclip">GES.UriClips</a>, <a href="#ges.baseeffect">GES.BaseEffect</a> etc,
and then you can extract objects of those types with the appropriate parameters from the asset
using the (FIXME broken link)ges_asset_extract method:</p>

<pre class="inlined_code">
GESAsset *effect_asset;
GESEffect *effect;

// You create an asset for an effect
effect_asset = ges_asset_request (GES_TYPE_EFFECT, "agingtv", NULL);

// And now you can extract an instance of GESEffect from that asset
effect = GES_EFFECT (ges_asset_extract (effect_asset));

</pre>

<p>In that example, the advantages of having a <a href="#ges.asset">GES.Asset</a> are that you can know what effects
you are working with and let your user know about the avalaible ones, you can add metadata
to the <a href="#ges.asset">GES.Asset</a> through the <a href="#ges.metacontainer">GES.MetaContainer</a> interface and you have a model for your
custom effects. Note that <a href="#ges.asset">GES.Asset</a> management is making easier thanks to the <a href="#ges.project">GES.Project</a> class.</p>

<p>Each asset is represented by a pair of @extractable_type and @id (string). Actually the @extractable_type
is the type that implements the <a href="#ges.extractable">GES.Extractable</a> interface, that means that for example for a <a href="#ges.uriclip">GES.UriClip</a>,
the type that implements the <a href="#ges.extractable">GES.Extractable</a> interface is <a href="#ges.clip">GES.Clip</a>.
The identifier represents different things depending on the @extractable_type and you should check
the documentation of each type to know what the ID of <a href="#ges.asset">GES.Asset</a> actually represents for that type. By default,
we only have one <a href="#ges.asset">GES.Asset</a> per type, and the @id is the name of the type, but this behaviour is overriden
to be more useful. For example, for GESTransitionClips, the ID is the vtype of the transition
you will extract from it (ie crossfade, box-wipe-rc etc..) For <a href="#ges.effect">GES.Effect</a> the ID is the
@bin-description property of the extracted objects (ie the gst-launch style description of the bin that
will be used).</p>

<p>Each and every <a href="#ges.asset">GES.Asset</a> is cached into GES, and you can query those with the (FIXME broken link)ges_list_assets function.
Also the system will automatically register <a href="#ges.asset">GES.Assets</a> for <a href="#ges.formatter">GES.Formatters</a> and <a href="#ges.transitionclip">GES.TransitionClips</a>
and standard effects (actually not implemented yet) and you can simply query those calling:</p>

<pre class="inlined_code">
   GList *formatter_assets, *tmp;

   //  List all  the transitions
   formatter_assets = ges_list_assets (GES_TYPE_FORMATTER);

   // Print some infos about the formatter GESAsset
   for (tmp = formatter_assets; tmp; tmp = tmp->next) {
     g_print ("Name of the formatter: %s, file extension it produces: %s",
       ges_meta_container_get_string (GES_META_CONTAINER (tmp->data), GES_META_FORMATTER_NAME),
       ges_meta_container_get_string (GES_META_CONTAINER (tmp->data), GES_META_FORMATTER_EXTENSION));
   }

   g_list_free (transition_assets);

</pre>

<p>You can request the creation of <a href="#ges.asset">GES.Assets</a> using either (FIXME broken link)ges_asset_request_async or
(FIXME broken link)ges_asset_request_async. All the <a href="#ges.asset">GES.Assets</a> are cached and thus any asset that has already
been created can be requested again without overhead.</p>

<p><h3 id='gobject-properties'><u>GObject properties:</u></h3>
<h3 id="ges.asset:extractable-type">GES.Asset:extractable-type</h3></p>

<h3 id="ges.asset:id">GES.Asset:id</h3>

<h3 id='methods'><u>Methods:</u></h3>

<h3 id="ges.asset.get_id" c_name="ges_asset_get_id" python_name="GES.Asset.get_id" shell_name="GES.Asset.get_id">GES.Asset.get_id</h3>
<pre><code class="highlight c"><span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">ges_asset_get_id</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">unicode</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_id</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_get_id()</span>

</code></pre>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a> to get ID from</p>

<p><em>Returns</em>: The ID of <strong>self</strong></p>

<p>Gets the ID of a <a href="#ges.asset">GES.Asset</a></p>

<h3 id="ges.asset.extract" c_name="ges_asset_extract" python_name="GES.Asset.extract" shell_name="GES.Asset.extract">GES.Asset.extract</h3>
<pre><code class="highlight c"><span class="n">GESExtractable</span><span class="o">*</span> <span class="n">ges_asset_extract</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span>
                                   <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Extractable</span><span class="p">)</span>
<span class="nd">@throws</span><span class="p">(</span><span class="n">GLib</span><span class="o">.</span><span class="n">Error</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">extract</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_extract()</span>

</code></pre>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a> to get extract an object from</p>

<p><em>Returns</em>: A newly created <a href="#ges.extractable">GES.Extractable</a></p>

<p>Extracts a new <a href="https://developer.gnome.org/gobject/unstable//gobject-The-Base-Object-Type.html#GObject">GObject.Object</a> from @asset. The type of the object is
defined by the extractable-type of @asset, you can check what
type will be extracted from @asset using
(FIXME broken link)ges_asset_get_extractable_type</p>

<h3 id="ges.asset.get_extractable_type" c_name="ges_asset_get_extractable_type" python_name="GES.Asset.get_extractable_type" shell_name="GES.Asset.get_extractable_type">GES.Asset.get_extractable_type</h3>
<pre><code class="highlight c"><span class="n">GType</span> <span class="n">ges_asset_get_extractable_type</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GType</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_extractable_type</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_get_extractable_type()</span>

</code></pre>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a></p>

<p><em>Returns</em>: the type of object that can be extracted from <strong>self</strong></p>

<p>Gets the type of object that can be extracted from <strong>self</strong></p>

<h3 id="ges.asset.request" c_name="ges_asset_request" python_name="GES.Asset.request" shell_name="GES.Asset.request">GES.Asset.request</h3>
<pre><code class="highlight c"><span class="n">GESAsset</span><span class="o">*</span> <span class="n">ges_asset_request</span> <span class="p">(</span><span class="n">GType</span> <span class="n">extractable_type</span><span class="p">,</span>
                             <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">id</span><span class="p">,</span>
                             <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GType</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@throws</span><span class="p">(</span><span class="n">GLib</span><span class="o">.</span><span class="n">Error</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">request</span><span class="p">(</span><span class="n">extractable_type</span><span class="p">,</span> <span class="nb">id</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_request()</span>

</code></pre>

<p><em>extractable_type</em>: The <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> of the object that can be extracted from the new asset.</p>

<p><em>id</em>: The Identifier or <strong>NULL</strong></p>

<p><em>Returns</em>: A reference to the wanted <a href="#ges.asset">GES.Asset</a> or <strong>NULL</strong></p>

<p>Create a <a href="#ges.asset">GES.Asset</a> in the most simple cases, you should look at the <strong>extractable_type</strong>
documentation to see if that constructor can be called for this particular type</p>

<p>As it is recommanded not to instanciate assets for GESUriClip synchronously,
it will not work with this method, but you can instead use the specific
(FIXME broken link)ges_uri_clip_asset_request_sync method if you really want to.</p>

<h3 id="ges.asset.request_async" c_name="ges_asset_request_async" python_name="GES.Asset.request_async" shell_name="GES.Asset.request_async">GES.Asset.request_async</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">ges_asset_request_async</span> <span class="p">(</span><span class="n">GType</span> <span class="n">extractable_type</span><span class="p">,</span>
                              <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">id</span><span class="p">,</span>
                              <span class="n">GCancellable</span><span class="o">*</span> <span class="n">cancellable</span><span class="p">,</span>
                              <span class="n">GAsyncReadyCallback</span> <span class="n">callback</span><span class="p">,</span>
                              <span class="n">gpointer</span> <span class="n">user_data</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GType</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">Gio</span><span class="o">.</span><span class="n">Cancellable</span><span class="p">,</span> <span class="n">Gio</span><span class="o">.</span><span class="n">AsyncReadyCallback</span><span class="p">,</span> <span class="n">gpointer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">request_async</span><span class="p">(</span><span class="n">extractable_type</span><span class="p">,</span> <span class="nb">id</span><span class="p">,</span> <span class="n">cancellable</span><span class="p">,</span> <span class="n">callback</span><span class="p">,</span> <span class="n">user_data</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_request_async()</span>

</code></pre>

<p><em>extractable_type</em>: The <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> of the object that can be extracted from the
   new asset. The class must implement the <a href="#ges.extractable">GES.Extractable</a> interface.</p>

<p><em>id</em>: The Identifier of the asset we want to create. This identifier depends of the extractable,
type you want. By default it is the name of the class itself (or <strong>NULL</strong>), but for example for a
GESEffect, it will be the pipeline description, for a GESUriClip it
will be the name of the file, etc&hellip; You should refer to the documentation of the <a href="#ges.extractable">GES.Extractable</a>
type you want to create a <a href="#ges.asset">GES.Asset</a> for.</p>

<p><em>cancellable</em>: optional %GCancellable object, <strong>NULL</strong> to ignore.</p>

<p><em>callback</em>: a <a href="https://developer.gnome.org/gio/unstable//GAsyncResult.html#GAsyncReadyCallback">Gio.AsyncReadyCallback</a> to call when the initialization is finished,
Note that the @source of the callback will be the <a href="#ges.asset">GES.Asset</a>, but you need to
make sure that the asset is properly loaded using the (FIXME broken link)ges_asset_request_finish
method. This asset can not be used as is.</p>

<p><em>user_data</em>: The user data to pass when <strong>callback</strong> is called</p>

<p><em>Returns</em>: FIXME empty description</p>

<p>Request a new <a href="#ges.asset">GES.Asset</a> asyncronously, <strong>callback</strong> will be called when the materail is
ready to be used or if an error occured.</p>

<p>Example of request of a GESAsset async:</p>

<pre class="inlined_code">
// The request callback
static void
asset_loaded_cb (GESAsset * source, GAsyncResult * res, gpointer user_data)
{
  GESAsset *asset;
  GError *error = NULL;

  asset = ges_asset_request_finish (res, &error);
  if (asset) {
   g_print ("The file: %s is usable as a FileSource",
       ges_asset_get_id (asset));
  } else {
   g_print ("The file: %s is *not* usable as a FileSource because: %s",
       ges_asset_get_id (source), error->message);
  }

  gst_object_unref (mfs);
}

// The request:
ges_asset_request_async (GES_TYPE_URI_CLIP, some_uri, NULL,
   (GAsyncReadyCallback) asset_loaded_cb, user_data);
</pre>

<h3 id="ges.asset.request_finish" c_name="ges_asset_request_finish" python_name="GES.Asset.request_finish" shell_name="GES.Asset.request_finish">GES.Asset.request_finish</h3>
<pre><code class="highlight c"><span class="n">GESAsset</span><span class="o">*</span> <span class="n">ges_asset_request_finish</span> <span class="p">(</span><span class="n">GAsyncResult</span><span class="o">*</span> <span class="n">res</span><span class="p">,</span>
                                    <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">Gio</span><span class="o">.</span><span class="n">AsyncResult</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@throws</span><span class="p">(</span><span class="n">GLib</span><span class="o">.</span><span class="n">Error</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">request_finish</span><span class="p">(</span><span class="n">res</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_asset_request_finish()</span>

</code></pre>

<p><em>res</em>: The <a href="https://developer.gnome.org/gio/unstable//GAsyncResult.html">Gio.AsyncResult</a> from which to get the newly created <a href="#ges.asset">GES.Asset</a></p>

<p><em>Returns</em>: The <a href="#ges.asset">GES.Asset</a> previously requested</p>

<p>Finalize the request of an async <a href="#ges.asset">GES.Asset</a></p>

<h3 id='vfuncs'><u>Virtual Methods:</u></h3>

<h3 id="ges.asset.do_extract" c_name="ges_asset_do_extract" python_name="GES.Asset.do_extract" shell_name="GES.Asset.do_extract">GES.Asset.do_extract</h3>
<pre><code class="highlight c"><span class="n">GESExtractable</span><span class="o">*</span> <span class="n">GESAssetClass</span><span class="o">-&gt;</span><span class="n">extract</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span>
                               <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>


</code></pre>

<p><em>self</em>: The <a href="#ges.asset">GES.Asset</a> to get extract an object from</p>

<p><em>Returns</em>: A newly created <a href="#ges.extractable">GES.Extractable</a></p>

<p>Extracts a new <a href="https://developer.gnome.org/gobject/unstable//gobject-The-Base-Object-Type.html#GObject">GObject.Object</a> from @asset. The type of the object is
defined by the extractable-type of @asset, you can check what
type will be extracted from @asset using
(FIXME broken link)ges_asset_get_extractable_type</p>

<h3 id="ges.asset.do_request_id_update" c_name="ges_asset_do_request_id_update" python_name="GES.Asset.do_request_id_update" shell_name="GES.Asset.do_request_id_update">GES.Asset.do_request_id_update</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">GESAssetClass</span><span class="o">-&gt;</span><span class="n">request_id_update</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span>
                                  <span class="n">gchar</span><span class="o">**</span> <span class="n">proposed_new_id</span><span class="p">,</span>
                                  <span class="n">GError</span><span class="o">*</span> <span class="n">error</span><span class="p">);</span>


</code></pre>

<p><em>self</em>: FIXME empty description
<em>proposed_new_id</em>: FIXME empty description
<em>error</em>: FIXME empty description
<em>Returns</em>: FIXME empty description</p>

<h3 id="ges.asset.do_start_loading" c_name="ges_asset_do_start_loading" python_name="GES.Asset.do_start_loading" shell_name="GES.Asset.do_start_loading">GES.Asset.do_start_loading</h3>
<pre><code class="highlight c"><span class="n">GESAssetLoadingReturn</span> <span class="n">GESAssetClass</span><span class="o">-&gt;</span><span class="n">start_loading</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span>
                                           <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>


</code></pre>

<p><em>self</em>: FIXME empty description
<em>Returns</em>: FIXME empty description</p>

<h3 id="ges.asset.do_inform_proxy" c_name="ges_asset_do_inform_proxy" python_name="GES.Asset.do_inform_proxy" shell_name="GES.Asset.do_inform_proxy">GES.Asset.do_inform_proxy</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">GESAssetClass</span><span class="o">-&gt;</span><span class="n">inform_proxy</span> <span class="p">(</span><span class="n">GESAsset</span><span class="o">*</span> <span class="n">self</span><span class="p">,</span>
                         <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">proxy_id</span><span class="p">);</span>


</code></pre>

<p><em>self</em>: FIXME empty description
<em>proxy_id</em>: FIXME empty description
<em>Returns</em>: FIXME empty description</p>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
