<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GES">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="ges.timeline" c_name="GESTimeline" python_name="GES.Timeline" shell_name="The Timeline">GES.Timeline</h2>

<p>A <a href="#ges.timeline">GES.Timeline</a> is composed of one or more <a href="#ges.layer">GES.Layers</a>, and produces data on one or
more <a href="#ges.track">GES.Tracks</a>.</p>

<p>A <a href="#ges.track">GES.Track</a> represents a media type, for example audio, video or text. For the
moment only audio and video tracks are supported.<a href="#ges.layer">GES.Layers</a> contain <a href="#ges.clip">GES.Clips</a>, and represent the relative priorities of these clips.<h4 id="layers">Layers</h4></p>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="n">GESTimeline</span> <span class="o">*</span>
<span class="nf">create_timeline_with_n_layers</span> <span class="p">(</span><span class="n">guint</span> <span class="n">n_layers</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span> <span class="o">=</span> <span class="n">ges_timeline_new</span> <span class="p">();</span>
  <span class="n">guint</span> <span class="n">i</span><span class="p">;</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">i</span> <span class="o">=</span> <span class="n">n_layers</span><span class="p">;</span> <span class="n">i</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">;</span> <span class="n">i</span> <span class="o">-=</span> <span class="mi">1</span><span class="p">)</span>
    <span class="n">ges_timeline_append_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">timeline</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span>

<span class="k">def</span> <span class="nf">create_timeline_with_n_layers</span><span class="p">(</span><span class="n">n_layers</span><span class="p">):</span>
    <span class="n">timeline</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>

    <span class="k">while</span> <span class="n">n_layers</span> <span class="o">&gt;</span> <span class="mi">0</span><span class="p">:</span>
        <span class="n">timeline</span><span class="o">.</span><span class="n">append_layer</span><span class="p">()</span>
        <span class="n">n_layers</span> <span class="o">-=</span> <span class="mi">1</span>

    <span class="k">return</span> <span class="n">timeline</span>

</code></pre>
<pre><code class="highlight shell">Can<span class="s1">'t create an empty timeline with ges-launch-1.0!

</span></code></pre>

<p>Let&rsquo;s imagine a timeline that contains two layers:</p>

<pre class="inlined_code">
  Timeline, duration : 0 seconds
+--------------------------------------------------------+
|                                                        |
|         +-------------------------------------------+  |
|         |                                           |  |
| Layer 1 |                                           |  |
|         |                                           |  |
|         +-------------------------------------------+  |
|                                                        |
|         +-------------------------------------------+  |
|         |                                           |  |
| Layer 2 |                                           |  |
|         |                                           |  |
|         +-------------------------------------------+  |
|                                                        |
+--------------------------------------------------------+
</pre>

<blockquote>
<p>After modifying a timeline, you need to commit it to have the changes taken into account.</p>
</blockquote>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">void</span>
<span class="nf">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">GESTimeline</span> <span class="o">*</span> <span class="n">timeline</span><span class="p">,</span> <span class="n">GstClockTime</span> <span class="n">duration</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GList</span> <span class="o">*</span><span class="n">tmp</span><span class="p">,</span> <span class="o">*</span><span class="n">layers</span> <span class="o">=</span> <span class="n">ges_timeline_get_layers</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">layers</span><span class="p">;</span> <span class="n">tmp</span><span class="p">;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">GESClip</span> <span class="o">*</span><span class="n">clip</span> <span class="o">=</span> <span class="n">GES_CLIP</span> <span class="p">(</span><span class="n">ges_test_clip_new</span> <span class="p">());</span>
    <span class="n">GESLayer</span> <span class="o">*</span><span class="n">layer</span> <span class="o">=</span> <span class="n">GES_LAYER</span> <span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">);</span>

    <span class="n">ges_layer_add_clip</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">clip</span><span class="p">);</span>
    <span class="n">g_object_set</span> <span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="s">"duration"</span><span class="p">,</span> <span class="n">duration</span><span class="p">,</span> <span class="s">"start"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="cm">/* We commit the timeline to have our changes taken into account */</span>
  <span class="n">ges_timeline_commit</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span>

<span class="k">def</span> <span class="nf">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">duration</span><span class="p">):</span>
    <span class="k">for</span> <span class="n">layer</span> <span class="ow">in</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_layers</span><span class="p">():</span>
        <span class="n">clip</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">TestClip</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
        <span class="n">layer</span><span class="o">.</span><span class="n">add_clip</span> <span class="p">(</span><span class="n">clip</span><span class="p">)</span>
        <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="n">duration</span>
        <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">start</span> <span class="o">=</span> <span class="mi">0</span>

    <span class="c"># We commit the timeline to have our changes taken into account</span>
    <span class="n">timeline</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>

</code></pre>
<pre><code class="highlight shell"><span class="c">#!/bin/sh</span>

<span class="c"># With ges-launch-1.0, audio and video tracks will be</span>
<span class="c"># automatically added</span>
ges-launch-1.0 +test-clip snow <span class="nv">duration</span><span class="o">=</span>5 <span class="nv">layer</span><span class="o">=</span>0 <span class="se">\</span>
           +test-clip smpte <span class="nv">duration</span><span class="o">=</span>10 <span class="nv">layer</span><span class="o">=</span>1

</code></pre>

<p>If we add two clips in layer 1 and layer 2, each starting at 0 with a
duration of 10 seconds, our timeline now looks like this:</p>

<pre class="inlined_code">

  Timeline, duration : 10 seconds
+--------------------------------------------------------+
|                                                        |
|         +-------------------------------------------+  |
|         | +=======================================+ |  |
| Layer 1 | |              Clip 1                   | |  |
|         | +=======================================+ |  |
|         +-------------------------------------------+  |
|                                                        |
|         +-------------------------------------------+  |
|         | +=======================================+ |  |
| Layer 2 | |              Clip 2                   | |  |
|         | +=======================================+ |  |
|         +-------------------------------------------+  |
|                                                        |
+--------------------------------------------------------+

</pre>

<p>In that timeline, Clip 1 is said to have the highest &ldquo;priority&rdquo;. In the case
of video streams, it means that it will be rendered on top of Clip 2, which in turn signifies
that if Clip 1 and Clip 2 share the same width and height, Clip 2 will be completely
invisible.</p>

<p>In the case of video streams, one can therefore think of the layer priority as a z-index.<h4 id="tracks">Tracks</h4></p>

<p>Let&rsquo;s continue with that timeline. For now it indeed mixes various layers together, but it
doesn&rsquo;t output anything. That&rsquo;s what <a href="#ges.track">GES.Tracks</a> are for.</p>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">void</span>
<span class="nf">add_one_video_track</span> <span class="p">(</span><span class="n">GESTimeline</span> <span class="o">*</span> <span class="n">timeline</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTrack</span> <span class="o">*</span><span class="n">track</span> <span class="o">=</span> <span class="n">GES_TRACK</span> <span class="p">(</span><span class="n">ges_video_track_new</span> <span class="p">());</span>

  <span class="n">ges_timeline_add_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">track</span><span class="p">);</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span>

<span class="k">def</span> <span class="nf">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">):</span>
    <span class="n">timeline</span><span class="o">.</span><span class="n">add_track</span> <span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">VideoTrack</span><span class="o">.</span><span class="n">new</span><span class="p">())</span>

</code></pre>
<pre><code class="highlight shell"><span class="c">#!/bin/sh</span>

<span class="c"># With ges-launch-1.0, we can restrict the types of tracks,</span>
<span class="c"># but not actually add them.</span>
ges-launch-1.0 +test-clip snow <span class="nv">duration</span><span class="o">=</span>5 <span class="nv">layer</span><span class="o">=</span>0 <span class="se">\</span>
           +test-clip smpte <span class="nv">duration</span><span class="o">=</span>10 <span class="nv">layer</span><span class="o">=</span>1 --track-types video

</code></pre>

<p>If we add a video track to our timeline, it can be represented that way:</p>

<pre class="inlined_code">

  Timeline, duration : 10 seconds
+--------------------------------------------------------+
|                                                        |
|         +-------------------------------------------+  |
|         | +=======================================+ |  |
| Layer 1 | |              Clip 1                   | |  |
|         | +=======================================+ |  |
|         +-------------------------------------------+  |
|                                                        |--------> Video Track
|         +-------------------------------------------+  |
|         | +=======================================+ |  |
| Layer 2 | |              Clip 2                   | |  |
|         | +=======================================+ |  |
|         +-------------------------------------------+  |
|                                                        |
+--------------------------------------------------------+

</pre>

<blockquote>
<p>Playback and Rendering are documented in a separate section.</p>
</blockquote>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="n">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">);</span>
  <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span><span class="p">,</span> <span class="n">Gst</span>

<span class="kn">from</span> <span class="nn">create_timeline_with_n_layers</span> <span class="kn">import</span> <span class="n">create_timeline_with_n_layers</span>
<span class="kn">from</span> <span class="nn">add_one_clip_in_each_layer</span> <span class="kn">import</span> <span class="n">add_one_clip_in_each_layer</span>
<span class="kn">from</span> <span class="nn">add_one_video_track</span> <span class="kn">import</span> <span class="n">add_one_video_track</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">play_timeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">add_one_clip_in_each_layer</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span><span class="p">)</span>
    <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>
    <span class="c"># Convenience function for the sake of examples.</span>
    <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

</code></pre>
<pre><code class="highlight shell">FIXME

</code></pre>

<p>Assuming both clips contain video streams, our timeline will now output the
result of their compositing together on the video track. Any audio streams they contain are
ignored.</p>

<p>One can of course add an audio track to get audio output.</p>

<p>Having multiple tracks with the same type, for example 3 audio tracks, is
useful if one wants to link the timeline to a container that can store various languages, for
example a DVD creator might store English, Dutch and French audio tracks.</p>

<p><h3 id='tAQwRq' class='subsection'><u>GObject properties:</u></h3>
<h3 id="ges.timeline-auto-transition" c_name="GES.Timeline-auto-transition" python_name="GES.Timeline-auto-transition">GES.Timeline-auto-transition</h3></p>

<p>Set whether transitions are added automagically when clips overlap.</p>

<h3 id="ges.timeline-duration" c_name="GES.Timeline-duration" python_name="GES.Timeline-duration">GES.Timeline-duration</h3>

<p>Current duration (in nanoseconds) of the <a href="#ges.timeline">GES.Timeline</a></p>

<h3 id="ges.timeline-snapping-distance" c_name="GES.Timeline-snapping-distance" python_name="GES.Timeline-snapping-distance">GES.Timeline-snapping-distance</h3>

<p>Distance (in nanoseconds) from which a moving object will &ldquo;snap&rdquo;
with its neighbors. 0 means no snapping.</p>

<h3 id='ZSftxW' class='subsection'><u>Methods:</u></h3>

<div class='prototype_start'></div>

<h3 id="ges.timeline.new" c_name="ges_timeline_new">GES.Timeline.new</h3>
<pre><code class="highlight c"><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">ges_timeline_new</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>

</code></pre>

<p><em>Returns</em>: The new timeline.</p>

<div class='prototype_end'></div>

<p>Create a new empty <a href="#ges.timeline">GES.Timeline</a>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.new_audio_video" c_name="ges_timeline_new_audio_video">GES.Timeline.new_audio_video</h3>
<pre><code class="highlight c"><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">ges_timeline_new_audio_video</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>

</code></pre>

<p><em>Returns</em>: The newly created <a href="#ges.timeline">GES.Timeline</a>.</p>

<div class='prototype_end'></div>

<p>Creates a new <a href="#ges.timeline">GES.Timeline</a> containing a raw audio and a
raw video track.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.new_from_uri" c_name="ges_timeline_new_from_uri">GES.Timeline.new_from_uri</h3>
<pre><code class="highlight c"><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">ges_timeline_new_from_uri</span> <span class="p">(</span><span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">uri</span><span class="p">,</span>
                                        <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>

<p><em>uri</em>: the URI to load from</p>

<p><em>Returns</em>: A new timeline if the uri was loaded successfully, or <strong>NULL</strong> if the
uri could not be loaded.</p>

<div class='prototype_end'></div>

<p>Create a timeline from the given URI.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.load_from_uri" c_name="ges_timeline_load_from_uri" python_name="GES.Timeline.load_from_uri">GES.Timeline.load_from_uri</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_load_from_uri</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                     <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">uri</span><span class="p">,</span>
                                     <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="nd">@throws</span><span class="p">(</span><span class="n">GLib</span><span class="o">.</span><span class="n">Error</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">load_from_uri</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uri</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_load_from_uri()</span>

</code></pre>

<p><em>timeline</em>: an empty <a href="#ges.timeline">GES.Timeline</a> into which to load the serialized timeline</p>

<p><em>uri</em>: The URI to load from</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the timeline was loaded successfully, or <strong>FALSE</strong> if the uri
could not be loaded.</p>

<div class='prototype_end'></div>

<p>Load the contents of <strong>uri</strong> into the given timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.save_to_uri" c_name="ges_timeline_save_to_uri" python_name="GES.Timeline.save_to_uri" shell_name="GES.Timeline.save_to_uri">GES.Timeline.save_to_uri</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_save_to_uri</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                   <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">uri</span><span class="p">,</span>
                                   <span class="n">GESAsset</span><span class="o">*</span> <span class="n">formatter_asset</span><span class="p">,</span>
                                   <span class="n">gboolean</span> <span class="n">overwrite</span><span class="p">,</span>
                                   <span class="n">GError</span> <span class="o">**</span><span class="n">error</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="nd">@throws</span><span class="p">(</span><span class="n">GLib</span><span class="o">.</span><span class="n">Error</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">save_to_uri</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">uri</span><span class="p">,</span> <span class="n">formatter_asset</span><span class="p">,</span> <span class="n">overwrite</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_save_to_uri()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>uri</em>: The URI to save to</p>

<p><em>formatter_asset</em>: The formatter asset to use or <strong>NULL</strong>. If <strong>NULL</strong>,
will try to save in the same format as the one from which the timeline has been loaded
or default to the formatter with the highest rank</p>

<p><em>overwrite</em>: <strong>TRUE</strong> to overwrite file if it exists</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the timeline was successfully saved to the given location,
else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>

<blockquote>
<p>Saving and loading a timeline is as easy as it gets</p>
</blockquote>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">ac</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">av</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="n">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">);</span>
  <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="n">ges_timeline_save_to_uri</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="s">"file:///tmp/test.xges"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="n">TRUE</span><span class="p">,</span>
          <span class="nb">NULL</span><span class="p">))</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

  <span class="n">gst_object_unref</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">ges_timeline_new_from_uri</span> <span class="p">(</span><span class="s">"file:///tmp/test.xges"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="k">if</span> <span class="p">(</span><span class="n">timeline</span> <span class="o">==</span> <span class="nb">NULL</span><span class="p">)</span>
    <span class="k">return</span> <span class="mi">1</span><span class="p">;</span>

  <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span><span class="p">,</span> <span class="n">Gst</span><span class="p">,</span> <span class="n">GLib</span>

<span class="kn">from</span> <span class="nn">create_timeline_with_n_layers</span> <span class="kn">import</span> <span class="n">create_timeline_with_n_layers</span>
<span class="kn">from</span> <span class="nn">add_one_clip_in_each_layer</span> <span class="kn">import</span> <span class="n">add_one_clip_in_each_layer</span>
<span class="kn">from</span> <span class="nn">add_one_video_track</span> <span class="kn">import</span> <span class="n">add_one_video_track</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">play_timeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">add_one_clip_in_each_layer</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span><span class="p">)</span>
    <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>
    <span class="n">timeline</span><span class="o">.</span><span class="n">save_to_uri</span> <span class="p">(</span><span class="s">"file:///tmp/test.xges"</span><span class="p">,</span> <span class="bp">None</span><span class="p">,</span> <span class="bp">True</span><span class="p">)</span>
    <span class="n">timeline</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="o">.</span><span class="n">new_from_uri</span> <span class="p">(</span><span class="s">"file:///tmp/test.xges"</span><span class="p">)</span>
    <span class="c"># Convenience function for the sake of examples.</span>
    <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

</code></pre>
<pre><code class="highlight shell"><span class="c">#!/bin/sh</span>

<span class="c"># The save-only switch means the timeline won't be played</span>
<span class="c"># Use --save if you want it to be.</span>
ges-launch-1.0 +test-clip snow <span class="nv">duration</span><span class="o">=</span>5 <span class="nb">set</span>-mute <span class="nb">true</span> --save-only example.xges
ges-launch-1.0 --load example.xges

</code></pre>

<p>Save the timeline to the given location.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.add_layer" c_name="ges_timeline_add_layer" python_name="GES.Timeline.add_layer">GES.Timeline.add_layer</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_add_layer</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                 <span class="n">GESLayer</span><span class="o">*</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">add_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">layer</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_add_layer()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>layer</em>: the <a href="#ges.layer">GES.Layer</a> to add</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the layer was properly added, else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>

<p>Add the layer to the timeline. The reference to the <strong>layer</strong> will be stolen
by the <strong>timeline</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.append_layer" c_name="ges_timeline_append_layer" python_name="GES.Timeline.append_layer">GES.Timeline.append_layer</h3>
<pre><code class="highlight c"><span class="n">GESLayer</span><span class="o">*</span> <span class="n">ges_timeline_append_layer</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">append_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_append_layer()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: The newly created <a href="#ges.layer">GES.Layer</a>.</p>

<div class='prototype_end'></div>

<p>Append a newly created <a href="#ges.layer">GES.Layer</a> to <strong>timeline</strong>
Note that you do not own any reference to the returned layer.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.remove_layer" c_name="ges_timeline_remove_layer" python_name="GES.Timeline.remove_layer">GES.Timeline.remove_layer</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_remove_layer</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                    <span class="n">GESLayer</span><span class="o">*</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">remove_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">layer</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_remove_layer()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>layer</em>: the <a href="#ges.layer">GES.Layer</a> to remove</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the layer was properly removed, else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GList</span> <span class="o">*</span><span class="n">tmp</span><span class="p">,</span> <span class="o">*</span><span class="n">layers</span><span class="p">;</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span> <span class="p">(</span><span class="mi">2</span><span class="p">);</span>
  <span class="n">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">);</span>
  <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="n">layers</span> <span class="o">=</span> <span class="n">ges_timeline_get_layers</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">layers</span><span class="p">;</span> <span class="n">tmp</span><span class="p">;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span>
    <span class="n">ges_timeline_remove_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">GES_LAYER</span> <span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>

  <span class="n">g_list_free</span> <span class="p">(</span><span class="n">layers</span><span class="p">);</span>

  <span class="n">ges_timeline_commit</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="cm">/* This will return immediately, as the timeline is now empty */</span>
  <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span><span class="p">,</span> <span class="n">Gst</span>

<span class="kn">from</span> <span class="nn">create_timeline_with_n_layers</span> <span class="kn">import</span> <span class="n">create_timeline_with_n_layers</span>
<span class="kn">from</span> <span class="nn">add_one_clip_in_each_layer</span> <span class="kn">import</span> <span class="n">add_one_clip_in_each_layer</span>
<span class="kn">from</span> <span class="nn">add_one_video_track</span> <span class="kn">import</span> <span class="n">add_one_video_track</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">play_timeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">add_one_clip_in_each_layer</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span><span class="p">)</span>
    <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">layer</span> <span class="ow">in</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_layers</span><span class="p">():</span>
        <span class="n">timeline</span><span class="o">.</span><span class="n">remove_layer</span> <span class="p">(</span><span class="n">layer</span><span class="p">)</span>

    <span class="n">timeline</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="c"># This will return immediately, as the timeline is now empty</span>
    <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

</code></pre>

<p>Remove the <strong>layer</strong> from the <strong>timeline</strong>. The reference that the <strong>timeline</strong> holds on
the <strong>layer</strong> will be dropped. If you wish to use the <strong>layer</strong> after calling this
method, you need to take a reference before calling.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_layers" c_name="ges_timeline_get_layers" python_name="GES.Timeline.get_layers">GES.Timeline.get_layers</h3>
<pre><code class="highlight c"><span class="n">GList</span><span class="o">*</span> <span class="n">ges_timeline_get_layers</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">([</span><span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_layers</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_layers()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: the list of
<a href="#ges.layer">GES.Layers</a> present in the <strong>timeline</strong> sorted by priority.
The caller should unref each layer once he is done with them.</p>

<div class='prototype_end'></div>

<p>Get the list of <a href="#ges.layer">GES.Layers</a> present in the Timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.add_track" c_name="ges_timeline_add_track" python_name="GES.Timeline.add_track">GES.Timeline.add_track</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_add_track</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                 <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">add_track</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">track</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_add_track()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>track</em>: the <a href="#ges.track">GES.Track</a> to add</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the track was properly added, else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>

<p>Add the <strong>track</strong> to the timeline. The reference to the <strong>track</strong> will be stolen by the
<strong>timeline</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.remove_track" c_name="ges_timeline_remove_track" python_name="GES.Timeline.remove_track" shell_name="GES.Timeline.remove_track">GES.Timeline.remove_track</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_remove_track</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                    <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">remove_track</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">track</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_remove_track()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>track</em>: the <a href="#ges.track">GES.Track</a> to remove</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the <strong>track</strong> was properly removed, else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>

<blockquote>
<p>This example creates a timeline with an audio track and a video track, then removes the video track</p>
</blockquote>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GList</span> <span class="o">*</span><span class="n">tmp</span><span class="p">,</span> <span class="o">*</span><span class="n">tracks</span><span class="p">;</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">ges_timeline_new_audio_video</span> <span class="p">();</span>
  <span class="n">ges_timeline_append_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="n">add_one_clip_in_each_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">);</span>

  <span class="n">tracks</span> <span class="o">=</span> <span class="n">ges_timeline_get_tracks</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">for</span> <span class="p">(</span><span class="n">tmp</span> <span class="o">=</span> <span class="n">tracks</span><span class="p">;</span> <span class="n">tmp</span><span class="p">;</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">tmp</span><span class="o">-&gt;</span><span class="n">next</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">GES_TRACK</span> <span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">)</span><span class="o">-&gt;</span><span class="n">type</span> <span class="o">==</span> <span class="n">GES_TRACK_TYPE_VIDEO</span><span class="p">)</span>
      <span class="n">ges_timeline_remove_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">GES_TRACK</span> <span class="p">(</span><span class="n">tmp</span><span class="o">-&gt;</span><span class="n">data</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="n">g_list_free</span> <span class="p">(</span><span class="n">tracks</span><span class="p">);</span>

  <span class="n">ges_timeline_commit</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span><span class="p">,</span> <span class="n">Gst</span>

<span class="kn">from</span> <span class="nn">add_one_clip_in_each_layer</span> <span class="kn">import</span> <span class="n">add_one_clip_in_each_layer</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">play_timeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="n">timeline</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="o">.</span><span class="n">new_audio_video</span><span class="p">()</span>
    <span class="n">timeline</span><span class="o">.</span><span class="n">append_layer</span><span class="p">()</span>
    <span class="n">add_one_clip_in_each_layer</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">10</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">track</span> <span class="ow">in</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_tracks</span><span class="p">():</span>
        <span class="k">if</span> <span class="n">track</span><span class="o">.</span><span class="nb">type</span> <span class="o">==</span> <span class="n">GES</span><span class="o">.</span><span class="n">TrackType</span><span class="o">.</span><span class="n">VIDEO</span><span class="p">:</span>
            <span class="n">timeline</span><span class="o">.</span><span class="n">remove_track</span> <span class="p">(</span><span class="n">track</span><span class="p">)</span>

    <span class="n">timeline</span><span class="o">.</span><span class="n">commit</span><span class="p">()</span>
    <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

</code></pre>
<pre><code class="highlight shell"><span class="c">#!/bin/sh</span>

<span class="c"># The save-only switch means the timeline won't be played</span>
<span class="c"># Use --save if you want it to be.</span>
ges-launch-1.0 +test-clip snow <span class="nv">duration</span><span class="o">=</span>5 --save-only example.xges
ges-launch-1.0 --load example.xges --track-types audio

</code></pre>

<p>Remove the <strong>track</strong> from the <strong>timeline</strong>. The reference stolen when adding the
<strong>track</strong> will be removed. If you wish to use the <strong>track</strong> after calling this
function you must ensure that you have a reference to it.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_tracks" c_name="ges_timeline_get_tracks" python_name="GES.Timeline.get_tracks">GES.Timeline.get_tracks</h3>
<pre><code class="highlight c"><span class="n">GList</span><span class="o">*</span> <span class="n">ges_timeline_get_tracks</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">([</span><span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_tracks</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_tracks()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: A list of <a href="#ges.track">GES.Tracks</a>.
The caller should unref each track once he is done with them.</p>

<div class='prototype_end'></div>

<p>Get the list of <a href="#ges.track">GES.Tracks</a> used by the Timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.commit" c_name="ges_timeline_commit" python_name="GES.Timeline.commit">GES.Timeline.commit</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_commit</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">commit</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_commit()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if pending changes were commited or <strong>FALSE</strong> if nothing needed
to be commited</p>

<div class='prototype_end'></div>

<p>Commit all the pending changes of the clips contained in the
<strong>timeline</strong>.</p>

<p>When changes happen in a timeline, they are not
directly executed in the non-linear engine. Call this method once you are
done with a set of changes and want it to be executed.</p>

<p>The <a href="#ges.timeline-commited">GES.Timeline-commited</a> signal will be emitted when the (possibly updated)
<a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstPipeline.html">Gst.Pipeline</a> is ready to output data again, except if the state of the
timeline was <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-READY:CAPS">Gst.State.ready</a> or <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-NULL:CAPS">Gst.State.null</a>.</p>

<p>Note that all the pending changes will automatically be executed when the
timeline goes from <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-READY:CAPS">Gst.State.ready</a> to <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-PAUSED:CAPS">Gst.State.paused</a>, which usually is
triggered by corresponding state changes in a containing <a href="#ges.pipeline">GES.Pipeline</a>.</p>

<p>You should not try to change the state of the timeline, seek it or add
tracks to it during a commit operation, that is between a call to this
function and after receiving the <a href="#ges.timeline-commited">GES.Timeline-commited</a> signal.</p>

<p>See (FIXME broken link)ges_timeline_commit_sync if you don&rsquo;t want to bother with waiting
for the signal.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.commit_sync" c_name="ges_timeline_commit_sync" python_name="GES.Timeline.commit_sync">GES.Timeline.commit_sync</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_commit_sync</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">commit_sync</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_commit_sync()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if pending changes were commited or <strong>FALSE</strong> if nothing needed
to be commited</p>

<div class='prototype_end'></div>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">argc</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>
  <span class="n">GESPipeline</span> <span class="o">*</span><span class="n">pipeline</span><span class="p">;</span>
  <span class="n">GESLayer</span> <span class="o">*</span><span class="n">layer</span><span class="p">;</span>
  <span class="n">GESClip</span> <span class="o">*</span><span class="n">clip</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="cm">/* Let's setup a timeline with a 1-second clip, this part should now look
   * pretty familiar */</span>
  <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="n">layer</span> <span class="o">=</span> <span class="n">ges_timeline_get_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">clip</span> <span class="o">=</span> <span class="n">GES_CLIP</span> <span class="p">(</span><span class="n">ges_test_clip_new</span> <span class="p">());</span>
  <span class="n">g_object_set</span> <span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="s">"duration"</span><span class="p">,</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">,</span> <span class="s">"start"</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_layer_add_clip</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">clip</span><span class="p">);</span>
  <span class="n">gst_object_unref</span> <span class="p">(</span><span class="n">layer</span><span class="p">);</span>

  <span class="cm">/* This returns us a paused pipeline, all the changes are commited
   * automatically when going from READY to PAUSED.
   */</span>
  <span class="n">pipeline</span> <span class="o">=</span> <span class="n">prepare_pipeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="cm">/* These changes will only be executed once we have commited the timeline */</span>
  <span class="n">g_object_set</span> <span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="s">"duration"</span><span class="p">,</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

  <span class="cm">/* Even though the duration of the clip has been set to 5 seconds, playing
   * the pipeline will only last for 1 second as we haven't commited our changes
   */</span>
  <span class="n">play_pipeline</span> <span class="p">(</span><span class="n">pipeline</span><span class="p">);</span>
  <span class="n">g_print</span> <span class="p">(</span><span class="s">"We played the pipeline once</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="cm">/* Let's wait for one second just to make sure we notice the difference */</span>
  <span class="n">g_usleep</span> <span class="p">(</span><span class="mi">1000000</span><span class="p">);</span>

  <span class="n">ges_timeline_commit_sync</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="cm">/* The changes were taken into account, this will play for 5 seconds */</span>
  <span class="n">g_print</span> <span class="p">(</span><span class="s">"Playing again</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="n">play_pipeline</span> <span class="p">(</span><span class="n">pipeline</span><span class="p">);</span>
  <span class="n">g_print</span> <span class="p">(</span><span class="s">"We played the pipeline twice, bye o/</span><span class="se">\n</span><span class="s">"</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">GES</span><span class="p">,</span> <span class="n">Gst</span>
<span class="kn">from</span> <span class="nn">time</span> <span class="kn">import</span> <span class="n">sleep</span>

<span class="kn">from</span> <span class="nn">create_timeline_with_n_layers</span> <span class="kn">import</span> <span class="n">create_timeline_with_n_layers</span>
<span class="kn">from</span> <span class="nn">add_one_video_track</span> <span class="kn">import</span> <span class="n">add_one_video_track</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">prepare_pipeline</span><span class="p">,</span> <span class="n">play_pipeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="c"># Let's setup a timeline with a 1-second clip, this part should now</span>
    <span class="c"># look pretty familiar</span>
    <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">add_one_video_track</span><span class="p">(</span><span class="n">timeline</span><span class="p">)</span>
    <span class="n">layer</span> <span class="o">=</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_layer</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">clip</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">TestClip</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="n">layer</span><span class="o">.</span><span class="n">add_clip</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span>

    <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span>

    <span class="c"># This returns us a paused pipeline, all the changes are commited</span>
    <span class="c"># automatically when going from READY to PAUSED</span>
    <span class="n">pipeline</span> <span class="o">=</span> <span class="n">prepare_pipeline</span><span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

    <span class="c"># This change will only be executed once we have commited the timeline</span>
    <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span>

    <span class="c"># Even though the duration of the clip has been set to 5 seconds, playing</span>
    <span class="c"># the pipeline will only last for 1 second as we haven't commited our</span>
    <span class="c"># changes</span>
    <span class="n">play_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"We played the pipeline once"</span><span class="p">)</span>
    <span class="c"># Let's wait for one second just to make sure we notice the difference</span>
    <span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

    <span class="n">timeline</span><span class="o">.</span><span class="n">commit_sync</span><span class="p">()</span>

    <span class="c"># The changes were taken into account, this will play for 5 seconds</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"Playing again"</span><span class="p">)</span>
    <span class="n">play_pipeline</span><span class="p">(</span><span class="n">pipeline</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"We played the timeline twice, bye o/"</span><span class="p">)</span>

</code></pre>

<p>Commit all the pending changes of the <a href="#ges.clip">GES.Clips</a> contained in the
<strong>timeline</strong>.</p>

<p>Will return once the update is complete, that is when the
(possibly updated) <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstPipeline.html">Gst.Pipeline</a> is ready to output data again, or if the
state of the timeline was <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-READY:CAPS">Gst.State.ready</a> or <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#GST-STATE-NULL:CAPS">Gst.State.null</a>.</p>

<p>This function will wait for any pending state change of the timeline by
calling <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstElement.html#gst-element-get-state">gst_element_get_state</a> with a <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstClock.html#GST-CLOCK-TIME-NONE:CAPS">Gst.CLOCK_TIME_NONE</a> timeout, you
should not try to change the state from another thread before this function
has returned.</p>

<p>See <a href="#ges.timeline.commit">GES.Timeline.commit</a> for more information.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.is_empty" c_name="ges_timeline_is_empty" python_name="GES.Timeline.is_empty">GES.Timeline.is_empty</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_is_empty</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">is_empty</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_is_empty()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if the timeline is empty, <strong>FALSE</strong> otherwise.</p>

<div class='prototype_end'></div>

<p>Check whether a <a href="#ges.timeline">GES.Timeline</a> is empty or not.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_element" c_name="ges_timeline_get_element" python_name="GES.Timeline.get_element">GES.Timeline.get_element</h3>
<pre><code class="highlight c"><span class="n">GESTimelineElement</span><span class="o">*</span> <span class="n">ges_timeline_get_element</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                              <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">name</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">TimelineElement</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_element</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">name</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_element()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>name</em>: The name of the <a href="#ges.timelineelement">GES.TimelineElement</a> to look for</p>

<p><em>Returns</em>: The <a href="#ges.timelineelement">GES.TimelineElement</a> or <strong>NULL</strong> if no element
with the given <strong>name</strong> was found in the <strong>timeline</strong>.</p>

<div class='prototype_end'></div>
<pre><code class="highlight c"><span class="cp">#include "examples.h"
</span>
<span class="kt">int</span>
<span class="nf">main</span> <span class="p">(</span><span class="kt">int</span> <span class="n">args</span><span class="p">,</span> <span class="kt">char</span> <span class="o">**</span><span class="n">argv</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GESTimeline</span> <span class="o">*</span><span class="n">timeline</span><span class="p">;</span>
  <span class="n">GESClip</span> <span class="o">*</span><span class="n">clip</span><span class="p">,</span> <span class="o">*</span><span class="n">got_by_name_clip</span><span class="p">;</span>
  <span class="n">GESLayer</span> <span class="o">*</span><span class="n">layer</span><span class="p">;</span>

  <span class="n">gst_init</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_init</span> <span class="p">();</span>

  <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span> <span class="p">(</span><span class="mi">1</span><span class="p">);</span>
  <span class="n">add_one_video_track</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>

  <span class="n">layer</span> <span class="o">=</span> <span class="n">ges_timeline_get_layer</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
  <span class="n">clip</span> <span class="o">=</span> <span class="n">GES_CLIP</span> <span class="p">(</span><span class="n">ges_test_clip_new</span> <span class="p">());</span>
  <span class="n">g_object_set</span> <span class="p">(</span><span class="n">clip</span><span class="p">,</span> <span class="s">"duration"</span><span class="p">,</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">,</span> <span class="s">"name"</span><span class="p">,</span>
      <span class="s">"my-awesome-test-clip"</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">ges_layer_add_clip</span> <span class="p">(</span><span class="n">layer</span><span class="p">,</span> <span class="n">clip</span><span class="p">);</span>
  <span class="n">gst_object_unref</span> <span class="p">(</span><span class="n">layer</span><span class="p">);</span>

  <span class="n">got_by_name_clip</span> <span class="o">=</span>
      <span class="n">GES_CLIP</span> <span class="p">(</span><span class="n">ges_timeline_get_element</span> <span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="s">"my-awesome-test-clip"</span><span class="p">));</span>
  <span class="n">g_object_set</span> <span class="p">(</span><span class="n">got_by_name_clip</span><span class="p">,</span> <span class="s">"duration"</span><span class="p">,</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">GST_SECOND</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

  <span class="cm">/* As usual, the timeline commits itself automatically when going from READY
   * to PAUSED, playback will thus last 5 seconds */</span>
  <span class="n">play_timeline</span> <span class="p">(</span><span class="n">timeline</span><span class="p">);</span>
  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>
<pre><code class="highlight python"><span class="c">#!/usr/bin/env python</span>

<span class="kn">from</span> <span class="nn">gi.repository</span> <span class="kn">import</span> <span class="n">Gst</span><span class="p">,</span> <span class="n">GES</span>
<span class="kn">from</span> <span class="nn">create_timeline_with_n_layers</span> <span class="kn">import</span> <span class="n">create_timeline_with_n_layers</span>
<span class="kn">from</span> <span class="nn">add_one_video_track</span> <span class="kn">import</span> <span class="n">add_one_video_track</span>
<span class="kn">from</span> <span class="nn">play_timeline</span> <span class="kn">import</span> <span class="n">play_timeline</span>

<span class="k">if</span> <span class="n">__name__</span><span class="o">==</span><span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">Gst</span><span class="o">.</span><span class="n">init</span><span class="p">([])</span>
    <span class="n">GES</span><span class="o">.</span><span class="n">init</span><span class="p">()</span>

    <span class="n">timeline</span> <span class="o">=</span> <span class="n">create_timeline_with_n_layers</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
    <span class="n">add_one_video_track</span><span class="p">(</span><span class="n">timeline</span><span class="p">)</span>
    <span class="n">layer</span> <span class="o">=</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_layer</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
    <span class="n">clip</span> <span class="o">=</span> <span class="n">GES</span><span class="o">.</span><span class="n">TestClip</span><span class="o">.</span><span class="n">new</span><span class="p">()</span>
    <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">1</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span>
    <span class="n">clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">name</span> <span class="o">=</span> <span class="s">"my-awesome-test-clip"</span>
    <span class="n">layer</span><span class="o">.</span><span class="n">add_clip</span><span class="p">(</span><span class="n">clip</span><span class="p">)</span>

    <span class="n">got_by_name_clip</span> <span class="o">=</span> <span class="n">timeline</span><span class="o">.</span><span class="n">get_element</span><span class="p">(</span><span class="s">"my-awesome-test-clip"</span><span class="p">)</span>
    <span class="n">got_by_name_clip</span><span class="o">.</span><span class="n">props</span><span class="o">.</span><span class="n">duration</span> <span class="o">=</span> <span class="mi">5</span> <span class="o">*</span> <span class="n">Gst</span><span class="o">.</span><span class="n">SECOND</span>

    <span class="c"># As usual, the timeline commits itself automatically when going from READY</span>
    <span class="c"># to PAUSED, playback will thus last 5 seconds</span>
    <span class="n">play_timeline</span><span class="p">(</span><span class="n">timeline</span><span class="p">)</span>

</code></pre>

<p>Get a <a href="#ges.timelineelement">GES.TimelineElement</a> contained in the <strong>timeline</strong> named <strong>name</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_duration" c_name="ges_timeline_get_duration" python_name="GES.Timeline.get_duration">GES.Timeline.get_duration</h3>
<pre><code class="highlight c"><span class="n">GstClockTime</span> <span class="n">ges_timeline_get_duration</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">Gst</span><span class="o">.</span><span class="n">ClockTime</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_duration</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_duration()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: The current duration of <strong>timeline</strong>, in nanoseconds</p>

<div class='prototype_end'></div>

<p>Get the current duration of <strong>timeline</strong></p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_track_for_pad" c_name="ges_timeline_get_track_for_pad" python_name="GES.Timeline.get_track_for_pad">GES.Timeline.get_track_for_pad</h3>
<pre><code class="highlight c"><span class="n">GESTrack</span><span class="o">*</span> <span class="n">ges_timeline_get_track_for_pad</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                          <span class="n">GstPad</span><span class="o">*</span> <span class="n">pad</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">Gst</span><span class="o">.</span><span class="n">Pad</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_track_for_pad</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">pad</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_track_for_pad()</span>

</code></pre>

<p><em>timeline</em>: The <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>pad</em>: The <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstPad.html">Gst.Pad</a></p>

<p><em>Returns</em>: The corresponding <a href="#ges.track">GES.Track</a> if it is found,
or <strong>NULL</strong> if there is an error.</p>

<div class='prototype_end'></div>

<p>Search the <a href="#ges.track">GES.Track</a> corresponding to the given <strong>timeline</strong>&rsquo;s <strong>pad</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_pad_for_track" c_name="ges_timeline_get_pad_for_track" python_name="GES.Timeline.get_pad_for_track">GES.Timeline.get_pad_for_track</h3>
<pre><code class="highlight c"><span class="n">GstPad</span><span class="o">*</span> <span class="n">ges_timeline_get_pad_for_track</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                        <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">Gst</span><span class="o">.</span><span class="n">Pad</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_pad_for_track</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">track</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_pad_for_track()</span>

</code></pre>

<p><em>timeline</em>: The <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>track</em>: The <a href="#ges.track">GES.Track</a></p>

<p><em>Returns</em>: The corresponding <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstPad.html">Gst.Pad</a> if it is found,
or <strong>NULL</strong> if there is an error.</p>

<div class='prototype_end'></div>

<p>Search the <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstPad.html">Gst.Pad</a> corresponding to the given <strong>timeline</strong>&rsquo;s <strong>track</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.set_snapping_distance" c_name="ges_timeline_set_snapping_distance" python_name="GES.Timeline.set_snapping_distance">GES.Timeline.set_snapping_distance</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">ges_timeline_set_snapping_distance</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                         <span class="n">GstClockTime</span> <span class="n">snapping_distance</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">Gst</span><span class="o">.</span><span class="n">ClockTime</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_snapping_distance</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">snapping_distance</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_set_snapping_distance()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>snapping_distance</em>: The snapping distance to set.</p>

<div class='prototype_end'></div>

<p>Set the snapping distance of the <strong>timeline</strong>. See the documentation of
<a href="#ges.timeline-snapping-distance">snapping-distance</a> for more information.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_snapping_distance" c_name="ges_timeline_get_snapping_distance" python_name="GES.Timeline.get_snapping_distance">GES.Timeline.get_snapping_distance</h3>
<pre><code class="highlight c"><span class="n">GstClockTime</span> <span class="n">ges_timeline_get_snapping_distance</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">Gst</span><span class="o">.</span><span class="n">ClockTime</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_snapping_distance</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_snapping_distance()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: The @snapping_distance property of the <strong>timeline</strong></p>

<div class='prototype_end'></div>

<p>Get the configured snapping distance of the <strong>timeline</strong>. See
the documentation of <a href="#ges.timeline-snapping-distance">snapping-distance</a> for more
information.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.set_auto_transition" c_name="ges_timeline_set_auto_transition" python_name="GES.Timeline.set_auto_transition">GES.Timeline.set_auto_transition</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">ges_timeline_set_auto_transition</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                       <span class="n">gboolean</span> <span class="n">auto_transition</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_auto_transition</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">auto_transition</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_set_auto_transition()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>auto_transition</em>: whether to activate auto transitions.</p>

<div class='prototype_end'></div>

<p>Activate or deactivate auto transitions on <strong>timeline</strong>. See the documentation of
<a href="#ges.timeline-auto-transition">auto-transition</a> for more information.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_auto_transition" c_name="ges_timeline_get_auto_transition" python_name="GES.Timeline.get_auto_transition">GES.Timeline.get_auto_transition</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_timeline_get_auto_transition</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_auto_transition</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_auto_transition()</span>

</code></pre>

<p><em>timeline</em>: a <a href="#ges.timeline">GES.Timeline</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if transitions are automatically added, else <strong>FALSE</strong>.</p>

<div class='prototype_end'></div>

<p>Get whether transitions are automatically added when objects
overlap or not.
See the documentation of <a href="#ges.timeline-auto-transition">auto-transition</a> for more information.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline.get_layer" c_name="ges_timeline_get_layer" python_name="GES.Timeline.get_layer">GES.Timeline.get_layer</h3>
<pre><code class="highlight c"><span class="n">GESLayer</span><span class="o">*</span> <span class="n">ges_timeline_get_layer</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                                  <span class="n">guint</span> <span class="n">priority</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">priority</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_timeline_get_layer()</span>

</code></pre>

<p><em>timeline</em>: The <a href="#ges.timeline">GES.Timeline</a> to retrieve a layer from</p>

<p><em>priority</em>: The priority of the layer to find</p>

<p><em>Returns</em>: A <a href="#ges.layer">GES.Layer</a> or <strong>NULL</strong> if no layer with <strong>priority</strong> was found</p>

<div class='prototype_end'></div>

<p>Retrieve the <a href="#ges.layer">GES.Layer</a> with <strong>priority</strong></p>

<h3 id='rroNRU' class='subsection'><u>Virtual Methods:</u></h3>

<div class='prototype_start'></div>

<h3 id="ges.timeline.do_track_added" c_name="GESTimelineClass:track_added" python_name="GES.Timeline.do_track_added">GES.Timeline.do_track_added</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">GESTimelineClass</span><span class="o">-&gt;</span><span class="n">track_added</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                        <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_track_added</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">track</span><span class="p">):</span>

</code></pre>

<p><em>timeline</em>: FIXME empty description</p>

<p><em>track</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline.do_track_removed" c_name="GESTimelineClass:track_removed" python_name="GES.Timeline.do_track_removed">GES.Timeline.do_track_removed</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">GESTimelineClass</span><span class="o">-&gt;</span><span class="n">track_removed</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                          <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_track_removed</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">track</span><span class="p">):</span>

</code></pre>

<p><em>timeline</em>: FIXME empty description</p>

<p><em>track</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline.do_layer_added" c_name="GESTimelineClass:layer_added" python_name="GES.Timeline.do_layer_added">GES.Timeline.do_layer_added</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">GESTimelineClass</span><span class="o">-&gt;</span><span class="n">layer_added</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                        <span class="n">GESLayer</span><span class="o">*</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_layer_added</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">layer</span><span class="p">):</span>

</code></pre>

<p><em>timeline</em>: FIXME empty description</p>

<p><em>layer</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline.do_layer_removed" c_name="GESTimelineClass:layer_removed" python_name="GES.Timeline.do_layer_removed">GES.Timeline.do_layer_removed</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">GESTimelineClass</span><span class="o">-&gt;</span><span class="n">layer_removed</span> <span class="p">(</span><span class="n">GESTimeline</span><span class="o">*</span> <span class="n">timeline</span><span class="p">,</span>
                          <span class="n">GESLayer</span><span class="o">*</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Timeline</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">do_layer_removed</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">layer</span><span class="p">):</span>

</code></pre>

<p><em>timeline</em>: FIXME empty description</p>

<p><em>layer</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<h3 id='QYiKqi' class='subsection'><u>Signals:</u></h3>

<div class='prototype_start'></div>

<h3 id="ges.timeline-snapping-started" c_name="ges_timeline-snapping-started" python_name="GES.Timeline-snapping-started">GES.Timeline-snapping-started</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">snapping</span><span class="o">-</span><span class="n">started</span> <span class="p">(</span><span class="n">GESTrackElement</span> <span class="n">object</span><span class="p">,</span>
                       <span class="n">GESTrackElement</span> <span class="n">p0</span><span class="p">,</span>
                       <span class="n">guint64</span> <span class="n">p1</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="nb">object</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>object</em>: FIXME empty description</p>

<p><em>p0</em>: FIXME empty description</p>

<p><em>p1</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline-track-added" c_name="ges_timeline-track-added" python_name="GES.Timeline-track-added">GES.Timeline-track-added</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">track</span><span class="o">-</span><span class="n">added</span> <span class="p">(</span><span class="n">GESTrack</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">track</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>track</em>: the <a href="#ges.track">GES.Track</a> that was added to the timeline</p>

<div class='prototype_end'></div>

<p>Will be emitted after the track was added to the timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline-commited" c_name="ges_timeline-commited" python_name="GES.Timeline-commited">GES.Timeline-commited</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">commited</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<div class='prototype_end'></div>

<p>This signal will be emitted once the changes initiated by (FIXME broken link)ges_timeline_commit
have been executed in the backend. Use (FIXME broken link)ges_timeline_commit_sync if you
don&rsquo;t need to do anything in the meantime.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline-select-tracks-for-object" c_name="ges_timeline-select-tracks-for-object" python_name="GES.Timeline-select-tracks-for-object">GES.Timeline-select-tracks-for-object</h3>
<pre><code class="highlight c"><span class="n">None</span> <span class="n">select</span><span class="o">-</span><span class="n">tracks</span><span class="o">-</span><span class="k">for</span><span class="o">-</span><span class="n">object</span> <span class="p">(</span><span class="n">GESClip</span> <span class="n">clip</span><span class="p">,</span>
                                    <span class="n">GESTrackElement</span> <span class="n">track</span><span class="o">-</span><span class="n">element</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">clip</span><span class="p">,</span> <span class="n">track</span><span class="o">-</span><span class="n">element</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>clip</em>: The <a href="#ges.clip">GES.Clip</a> on which @track-element will land</p>

<p><em>track-element</em>: The <a href="#ges.trackelement">GES.TrackElement</a> for which to choose the tracks it should land into</p>

<p><em>Returns</em>: a <a href="https://developer.gnome.org/glib/unstable//glib-Pointer-Arrays.html#GPtrArray">GLib.PtrArray</a> of <a href="#ges.track">GES.Track</a>-s where that object should be added</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline-snapping-ended" c_name="ges_timeline-snapping-ended" python_name="GES.Timeline-snapping-ended">GES.Timeline-snapping-ended</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">snapping</span><span class="o">-</span><span class="n">ended</span> <span class="p">(</span><span class="n">GESTrackElement</span> <span class="n">object</span><span class="p">,</span>
                     <span class="n">GESTrackElement</span> <span class="n">p0</span><span class="p">,</span>
                     <span class="n">guint64</span> <span class="n">p1</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="nb">object</span><span class="p">,</span> <span class="n">p0</span><span class="p">,</span> <span class="n">p1</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>object</em>: FIXME empty description</p>

<p><em>p0</em>: FIXME empty description</p>

<p><em>p1</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.timeline-layer-added" c_name="ges_timeline-layer-added" python_name="GES.Timeline-layer-added">GES.Timeline-layer-added</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">layer</span><span class="o">-</span><span class="n">added</span> <span class="p">(</span><span class="n">GESLayer</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">layer</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>layer</em>: the <a href="#ges.layer">GES.Layer</a> that was added to the timeline</p>

<div class='prototype_end'></div>

<p>Will be emitted after the layer was added to the timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline-layer-removed" c_name="ges_timeline-layer-removed" python_name="GES.Timeline-layer-removed">GES.Timeline-layer-removed</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">layer</span><span class="o">-</span><span class="n">removed</span> <span class="p">(</span><span class="n">GESLayer</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">layer</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>layer</em>: the <a href="#ges.layer">GES.Layer</a> that was removed from the timeline</p>

<div class='prototype_end'></div>

<p>Will be emitted after the layer was removed from the timeline.</p>

<div class='prototype_start'></div>

<h3 id="ges.timeline-track-removed" c_name="ges_timeline-track-removed" python_name="GES.Timeline-track-removed">GES.Timeline-track-removed</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">track</span><span class="o">-</span><span class="n">removed</span> <span class="p">(</span><span class="n">GESTrack</span> <span class="n">track</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="k">def</span> <span class="nf">callback</span><span class="p">(</span><span class="n">timeline</span><span class="p">,</span> <span class="n">track</span><span class="p">,</span> <span class="n">user_param1</span><span class="p">,</span> <span class="o">...</span><span class="p">)</span>

</code></pre>

<p><em>track</em>: the <a href="#ges.track">GES.Track</a> that was removed from the timeline</p>

<div class='prototype_end'></div>

<p>Will be emitted after the track was removed from the timeline.</p>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
