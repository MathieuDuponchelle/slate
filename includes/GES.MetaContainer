<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GES">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="ges.metacontainer" c_name="GESMetaContainer" python_name="GES.MetaContainer" shell_name="The Meta Container">GES.MetaContainer</h2>

<p>Interface that allows reading and writing meta</p>

<p><h3 id='methods'><u>Methods:</u></h3>
<h3 id="ges.metacontainer.add_metas_from_string" c_name="ges_meta_container_add_metas_from_string" python_name="GES.MetaContainer.add_metas_from_string" shell_name="GES.MetaContainer.add_metas_from_string">GES.MetaContainer.add_metas_from_string</h3></p>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_add_metas_from_string</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                   <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">str</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">add_metas_from_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="nb">str</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_add_metas_from_string()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>str</em>: a string created with <a href="#ges.metacontainer.metas_to_string">GES.MetaContainer.metas_to_string</a></p>

<p><em>Returns</em>: a new <a href="#ges.metacontainer">GES.MetaContainer</a>, or NULL in case of an
error.</p>

<p>Deserializes a meta container.</p>

<h3 id="ges.metacontainer.check_meta_registered" c_name="ges_meta_container_check_meta_registered" python_name="GES.MetaContainer.check_meta_registered" shell_name="GES.MetaContainer.check_meta_registered">GES.MetaContainer.check_meta_registered</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_check_meta_registered</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                   <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                   <span class="n">GESMetaFlag</span><span class="o">*</span> <span class="n">flags</span><span class="p">,</span>
                                                   <span class="n">GType</span><span class="o">*</span> <span class="n">type</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="n">GType</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">check_meta_registered</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_check_meta_registered()</span>

</code></pre>

<p><em>container</em>: FIXME empty description
<em>meta_item</em>: FIXME empty description
<em>flags</em>: FIXME empty description
<em>type</em>: FIXME empty description
<em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.foreach" c_name="ges_meta_container_foreach" python_name="GES.MetaContainer.foreach" shell_name="GES.MetaContainer.foreach">GES.MetaContainer.foreach</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">ges_meta_container_foreach</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                 <span class="n">GESMetaForeachFunc</span> <span class="n">func</span><span class="p">,</span>
                                 <span class="n">gpointer</span> <span class="n">user_data</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaForeachFunc</span><span class="p">,</span> <span class="n">gpointer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">foreach</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">func</span><span class="p">,</span> <span class="n">user_data</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_foreach()</span>

</code></pre>

<p><em>container</em>: container to iterate over</p>

<p><em>func</em>: function to be called for each metadata</p>

<p><em>user_data</em>: user specified data</p>

<p><em>Returns</em>: FIXME empty description</p>

<p>Calls the given function for each metadata inside the meta container. Note
that if there is no metadata, the function won&rsquo;t be called at all.</p>

<h3 id="ges.metacontainer.get_boolean" c_name="ges_meta_container_get_boolean" python_name="GES.MetaContainer.get_boolean" shell_name="GES.MetaContainer.get_boolean">GES.MetaContainer.get_boolean</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_boolean</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                         <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                         <span class="n">gboolean</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_boolean</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_boolean()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_date" c_name="ges_meta_container_get_date" python_name="GES.MetaContainer.get_date" shell_name="GES.MetaContainer.get_date">GES.MetaContainer.get_date</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_date</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                      <span class="n">GDate</span><span class="o">**</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GLib</span><span class="o">.</span><span class="n">Date</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_date</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_date()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_date_time" c_name="ges_meta_container_get_date_time" python_name="GES.MetaContainer.get_date_time" shell_name="GES.MetaContainer.get_date_time">GES.MetaContainer.get_date_time</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_date_time</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                           <span class="n">GstDateTime</span><span class="o">**</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">Gst</span><span class="o">.</span><span class="n">DateTime</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_date_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_date_time()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_double" c_name="ges_meta_container_get_double" python_name="GES.MetaContainer.get_double" shell_name="GES.MetaContainer.get_double">GES.MetaContainer.get_double</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_double</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                        <span class="n">gdouble</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_double</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_double()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_float" c_name="ges_meta_container_get_float" python_name="GES.MetaContainer.get_float" shell_name="GES.MetaContainer.get_float">GES.MetaContainer.get_float</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_float</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                       <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                       <span class="n">gfloat</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_float</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_float()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns FALSE if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_int" c_name="ges_meta_container_get_int" python_name="GES.MetaContainer.get_int" shell_name="GES.MetaContainer.get_int">GES.MetaContainer.get_int</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_int</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                     <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                     <span class="n">gint</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_int</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_int()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_int64" c_name="ges_meta_container_get_int64" python_name="GES.MetaContainer.get_int64" shell_name="GES.MetaContainer.get_int64">GES.MetaContainer.get_int64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_int64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                       <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                       <span class="n">gint64</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_int64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_int64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns <strong>FALSE</strong> if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_meta" c_name="ges_meta_container_get_meta" python_name="GES.MetaContainer.get_meta" shell_name="GES.MetaContainer.get_meta">GES.MetaContainer.get_meta</h3>
<pre><code class="highlight c"><span class="k">const</span> <span class="n">GValue</span><span class="o">*</span> <span class="n">ges_meta_container_get_meta</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">key</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GObject</span><span class="o">.</span><span class="n">Value</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_meta</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">key</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_meta()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>key</em>: Get the key name of the meta to retrieve</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the vale could be optained <strong>FALSE</strong> otherwize</p>

<p>Gets the value of a given meta item, returns NULL if @meta_item
can not be found.</p>

<h3 id="ges.metacontainer.get_string" c_name="ges_meta_container_get_string" python_name="GES.MetaContainer.get_string" shell_name="GES.MetaContainer.get_string">GES.MetaContainer.get_string</h3>
<pre><code class="highlight c"><span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">ges_meta_container_get_string</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                            <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">unicode</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_string()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_uint" c_name="ges_meta_container_get_uint" python_name="GES.MetaContainer.get_uint" shell_name="GES.MetaContainer.get_uint">GES.MetaContainer.get_uint</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_uint</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                      <span class="n">guint</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_uint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_uint()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.get_uint64" c_name="ges_meta_container_get_uint64" python_name="GES.MetaContainer.get_uint64" shell_name="GES.MetaContainer.get_uint64">GES.MetaContainer.get_uint64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_get_uint64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                        <span class="n">guint64</span><span class="o">*</span> <span class="n">dest</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_uint64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">dest</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_get_uint64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to get</p>

<p><em>dest</em>: Destination to which value of meta item will be copied
Gets the value of a given meta item, returns NULL if <strong>meta_item</strong>
can not be found.</p>

<p><em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.metas_to_string" c_name="ges_meta_container_metas_to_string" python_name="GES.MetaContainer.metas_to_string" shell_name="GES.MetaContainer.metas_to_string">GES.MetaContainer.metas_to_string</h3>
<pre><code class="highlight c"><span class="n">gchar</span><span class="o">*</span> <span class="n">ges_meta_container_metas_to_string</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">unicode</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">metas_to_string</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_metas_to_string()</span>

</code></pre>

<p><em>container</em>: a <a href="#ges.metacontainer">GES.MetaContainer</a></p>

<p><em>Returns</em>: a newly-allocated string, or NULL in case of an error. The
   string must be freed with <a href="https://developer.gnome.org/glib/unstable//glib-Memory-Allocation.html#g-free">g_free</a> when no longer needed.</p>

<p>Serializes a meta container to a string.</p>

<h3 id="ges.metacontainer.register_meta" c_name="ges_meta_container_register_meta" python_name="GES.MetaContainer.register_meta" shell_name="GES.MetaContainer.register_meta">GES.MetaContainer.register_meta</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                           <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">GValue</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GObject</span><span class="o">.</span><span class="n">Value</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the static meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_boolean" c_name="ges_meta_container_register_meta_boolean" python_name="GES.MetaContainer.register_meta_boolean" shell_name="GES.MetaContainer.register_meta_boolean">GES.MetaContainer.register_meta_boolean</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_boolean</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                   <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                   <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                   <span class="n">gboolean</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_boolean</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_boolean()</span>

</code></pre>

<p><em>container</em>: FIXME empty description
<em>flags</em>: FIXME empty description
<em>meta_item</em>: FIXME empty description
<em>value</em>: FIXME empty description
<em>Returns</em>: FIXME empty description</p>

<h3 id="ges.metacontainer.register_meta_date" c_name="ges_meta_container_register_meta_date" python_name="GES.MetaContainer.register_meta_date" shell_name="GES.MetaContainer.register_meta_date">GES.MetaContainer.register_meta_date</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_date</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="n">GDate</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GLib</span><span class="o">.</span><span class="n">Date</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_date</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_date()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_date_time" c_name="ges_meta_container_register_meta_date_time" python_name="GES.MetaContainer.register_meta_date_time" shell_name="GES.MetaContainer.register_meta_date_time">GES.MetaContainer.register_meta_date_time</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_date_time</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                     <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                     <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                     <span class="k">const</span> <span class="n">GstDateTime</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">Gst</span><span class="o">.</span><span class="n">DateTime</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_date_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_date_time()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_double" c_name="ges_meta_container_register_meta_double" python_name="GES.MetaContainer.register_meta_double" shell_name="GES.MetaContainer.register_meta_double">GES.MetaContainer.register_meta_double</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_double</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                  <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                  <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                  <span class="n">gdouble</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_double</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_double()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_float" c_name="ges_meta_container_register_meta_float" python_name="GES.MetaContainer.register_meta_float" shell_name="GES.MetaContainer.register_meta_float">GES.MetaContainer.register_meta_float</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_float</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                 <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                 <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                 <span class="n">gfloat</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_float</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_float()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_int" c_name="ges_meta_container_register_meta_int" python_name="GES.MetaContainer.register_meta_int" shell_name="GES.MetaContainer.register_meta_int">GES.MetaContainer.register_meta_int</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_int</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                               <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                               <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                               <span class="n">gint</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_int</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_int()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_int64" c_name="ges_meta_container_register_meta_int64" python_name="GES.MetaContainer.register_meta_int64" shell_name="GES.MetaContainer.register_meta_int64">GES.MetaContainer.register_meta_int64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_int64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                 <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                 <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                 <span class="n">gint64</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_int64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_int64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_string" c_name="ges_meta_container_register_meta_string" python_name="GES.MetaContainer.register_meta_string" shell_name="GES.MetaContainer.register_meta_string">GES.MetaContainer.register_meta_string</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_string</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                  <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                  <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                  <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_string()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_uint" c_name="ges_meta_container_register_meta_uint" python_name="GES.MetaContainer.register_meta_uint" shell_name="GES.MetaContainer.register_meta_uint">GES.MetaContainer.register_meta_uint</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_uint</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                <span class="n">guint</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_uint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_uint()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.register_meta_uint64" c_name="ges_meta_container_register_meta_uint64" python_name="GES.MetaContainer.register_meta_uint64" shell_name="GES.MetaContainer.register_meta_uint64">GES.MetaContainer.register_meta_uint64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_register_meta_uint64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                                  <span class="n">GESMetaFlag</span> <span class="n">flags</span><span class="p">,</span>
                                                  <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                                  <span class="n">guint64</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">MetaFlag</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">register_meta_uint64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">flags</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_register_meta_uint64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>flags</em>: The <a href="#ges.metaflag">GES.MetaFlag</a> to be used</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be register, <strong>FALSE</strong> otherwize</p>

<p>Sets a static meta on <strong>container</strong>. This method lets you define static
metadatas, which means that the type of the registered will be the only
type accepted for this meta on that particular <strong>container</strong>.</p>

<h3 id="ges.metacontainer.set_boolean" c_name="ges_meta_container_set_boolean" python_name="GES.MetaContainer.set_boolean" shell_name="GES.MetaContainer.set_boolean">GES.MetaContainer.set_boolean</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_boolean</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                         <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                         <span class="n">gboolean</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">bool</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_boolean</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_boolean()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_date" c_name="ges_meta_container_set_date" python_name="GES.MetaContainer.set_date" shell_name="GES.MetaContainer.set_date">GES.MetaContainer.set_date</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_date</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">GDate</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GLib</span><span class="o">.</span><span class="n">Date</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_date</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_date()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_date_time" c_name="ges_meta_container_set_date_time" python_name="GES.MetaContainer.set_date_time" shell_name="GES.MetaContainer.set_date_time">GES.MetaContainer.set_date_time</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_date_time</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                           <span class="k">const</span> <span class="n">GstDateTime</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">Gst</span><span class="o">.</span><span class="n">DateTime</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_date_time</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_date_time()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_double" c_name="ges_meta_container_set_double" python_name="GES.MetaContainer.set_double" shell_name="GES.MetaContainer.set_double">GES.MetaContainer.set_double</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_double</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                        <span class="n">gdouble</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_double</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_double()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_float" c_name="ges_meta_container_set_float" python_name="GES.MetaContainer.set_float" shell_name="GES.MetaContainer.set_float">GES.MetaContainer.set_float</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_float</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                       <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                       <span class="n">gfloat</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">float</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_float</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_float()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_int" c_name="ges_meta_container_set_int" python_name="GES.MetaContainer.set_int" shell_name="GES.MetaContainer.set_int">GES.MetaContainer.set_int</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_int</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                     <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                     <span class="n">gint</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_int</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_int()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_int64" c_name="ges_meta_container_set_int64" python_name="GES.MetaContainer.set_int64" shell_name="GES.MetaContainer.set_int64">GES.MetaContainer.set_int64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_int64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                       <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                       <span class="n">gint64</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_int64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_int64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_meta" c_name="ges_meta_container_set_meta" python_name="GES.MetaContainer.set_meta" shell_name="GES.MetaContainer.set_meta">GES.MetaContainer.set_meta</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_meta</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">GValue</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="n">GObject</span><span class="o">.</span><span class="n">Value</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_meta</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_meta()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set
Sets the value of a given meta item</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<h3 id="ges.metacontainer.set_string" c_name="ges_meta_container_set_string" python_name="GES.MetaContainer.set_string" shell_name="GES.MetaContainer.set_string">GES.MetaContainer.set_string</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_string</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_string</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_string()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_uint" c_name="ges_meta_container_set_uint" python_name="GES.MetaContainer.set_uint" shell_name="GES.MetaContainer.set_uint">GES.MetaContainer.set_uint</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_uint</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                      <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                      <span class="n">guint</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_uint</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_uint()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

<h3 id="ges.metacontainer.set_uint64" c_name="ges_meta_container_set_uint64" python_name="GES.MetaContainer.set_uint64" shell_name="GES.MetaContainer.set_uint64">GES.MetaContainer.set_uint64</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_meta_container_set_uint64</span> <span class="p">(</span><span class="n">GESMetaContainer</span><span class="o">*</span> <span class="n">container</span><span class="p">,</span>
                                        <span class="k">const</span> <span class="n">gchar</span><span class="o">*</span> <span class="n">meta_item</span><span class="p">,</span>
                                        <span class="n">guint64</span> <span class="n">value</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">MetaContainer</span><span class="p">,</span> <span class="nb">unicode</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_uint64</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">meta_item</span><span class="p">,</span> <span class="n">value</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_meta_container_set_uint64()</span>

</code></pre>

<p><em>container</em>: Target container</p>

<p><em>meta_item</em>: Name of the meta item to set</p>

<p><em>value</em>: Value to set</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the meta could be added, <strong>FALSE</strong> otherwize</p>

<p>Sets the value of a given meta item</p>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
