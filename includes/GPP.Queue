<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GPP">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="gpp.queue" c_name="GPPQueue" python_name="GPP.Queue">GPP.Queue</h2>

<p class="graphviz">
<!-- Generated by graphviz version 2.38.0 (20140413.2041) --><!-- Title: %3 Pages: 1 --><svg width="110pt" height="116pt" viewBox="0.00 0.00 110.00 116.00" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink"><g id="graph0" class="graph" transform="scale(1 1) rotate(0) translate(4 112)"><title>%3</title><polygon fill="white" stroke="none" points="-4,4 -4,-112 106,-112 106,4 -4,4"/><!-- GObject.Object --><g id="node1" class="node"><title>GObject.Object</title><g id="a_node1"><a xlink:href="https://developer.gnome.org/gobject/unstable//gobject-The-Base-Object-Type.html#GObject" xlink:title="GObject.Object"><path fill="none" stroke="black" d="M90,-108C90,-108 12,-108 12,-108 6,-108 0,-102 0,-96 0,-96 0,-84 0,-84 0,-78 6,-72 12,-72 12,-72 90,-72 90,-72 96,-72 102,-78 102,-84 102,-84 102,-96 102,-96 102,-102 96,-108 90,-108"/><text text-anchor="middle" x="51" y="-86.3" font-family="Times,serif" font-size="14.00">GObject.Object</text></a></g></g><!-- GPP.Queue --><g id="node2" class="node"><title>GPP.Queue</title><g id="a_node2"><a xlink:href="#gpp.queue" xlink:title="GPP.Queue"><path fill="none" stroke="black" d="M79,-36C79,-36 23,-36 23,-36 17,-36 11,-30 11,-24 11,-24 11,-12 11,-12 11,-6 17,-0 23,-0 23,-0 79,-0 79,-0 85,-0 91,-6 91,-12 91,-12 91,-24 91,-24 91,-30 85,-36 79,-36"/><text text-anchor="middle" x="51" y="-14.3" font-family="Times,serif" font-size="14.00">GPP.Queue</text></a></g></g><!-- GObject.Object&#45;&gt;GPP.Queue --><g id="edge1" class="edge"><title>GObject.Object&#45;&gt;GPP.Queue</title><path fill="none" stroke="black" d="M51,-71.6966C51,-63.9827 51,-54.7125 51,-46.1124"/><polygon fill="black" stroke="black" points="54.5001,-46.1043 51,-36.1043 47.5001,-46.1044 54.5001,-46.1043"/></g></g></svg></p>

<p><a href="#gpp.queue">GPP.Queue</a> routes requests from <a href="#gpp.client">GPP.Client</a> (s) to <a href="#gpp.worker">GPP.Worker</a> (s).</p>

<blockquote>
<p>Set up and start a queue</p>
</blockquote>
<pre class="highlight c"><code><span class="cp">#include &lt;glib-unix.h&gt;
</span>
<span class="cp">#include "gpp.h"
</span>
<span class="k">static</span> <span class="n">gboolean</span>
<span class="nf">interrupted_cb</span> <span class="p">(</span><span class="n">GMainLoop</span> <span class="o">*</span><span class="n">loop</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">g_main_loop_quit</span> <span class="p">(</span><span class="n">loop</span><span class="p">);</span>
  <span class="k">return</span> <span class="n">FALSE</span><span class="p">;</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span>
<span class="p">{</span>
  <span class="n">GPPQueue</span> <span class="o">*</span><span class="n">self</span> <span class="o">=</span> <span class="n">gpp_queue_new</span> <span class="p">();</span>
  <span class="n">GMainLoop</span> <span class="o">*</span><span class="n">loop</span> <span class="o">=</span> <span class="n">g_main_loop_new</span> <span class="p">(</span><span class="nb">NULL</span><span class="p">,</span> <span class="n">FALSE</span><span class="p">);</span>

  <span class="n">g_unix_signal_add_full</span> <span class="p">(</span><span class="n">G_PRIORITY_DEFAULT</span><span class="p">,</span> <span class="n">SIGINT</span><span class="p">,</span> <span class="p">(</span><span class="n">GSourceFunc</span><span class="p">)</span> <span class="n">interrupted_cb</span><span class="p">,</span> <span class="n">loop</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
  <span class="n">gpp_queue_start</span> <span class="p">(</span><span class="n">self</span><span class="p">);</span>
  <span class="n">g_main_loop_run</span> <span class="p">(</span><span class="n">loop</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>

</code></pre>

<p>It will detect if a worker stopped answering heartbeats, and
inform the client it was working for if there was one.</p>

<p>It will pick workers on a least-recently-used basis.</p>

<p><h3 id='FtPglg' class='subsection'><u>Methods:</u></h3></p>

<div class='prototype_start'></div>

<h3 id="gpp.queue.new" c_name="gpp_queue_new">GPP.Queue.new</h3>
<pre class="highlight c"><code><span class="n">GPPQueue</span><span class="o">*</span> <span class="n">gpp_queue_new</span> <span class="p">(</span><span class="kt">void</span><span class="p">);</span>

</code></pre>

<p><em>Returns</em>: the newly-created <a href="#gpp.queue">GPP.Queue</a>.</p>

<div class='prototype_end'></div>

<p>Create a new <a href="#gpp.queue">GPP.Queue</a>, which doesn&rsquo;t yet listen to <a href="#gpp.worker">GPP.Worker</a> (s).
Start it with <a href="#gpp.queue.start">GPP.Queue.start</a></p>

<div class='prototype_start'></div>

<h3 id="gpp.queue.start" c_name="gpp_queue_start" python_name="GPP.Queue.start">GPP.Queue.start</h3>
<pre class="highlight c"><code><span class="n">gboolean</span> <span class="n">gpp_queue_start</span> <span class="p">(</span><span class="n">GPPQueue</span><span class="o">*</span> <span class="n">self</span><span class="p">);</span>

</code></pre>
<pre class="highlight python"><code><span class="nd">@accepts</span><span class="p">(</span><span class="n">GPP</span><span class="o">.</span><span class="n">Queue</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">start</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for gpp_queue_start()</span>

</code></pre>

<p><em>self</em>: A <a href="#gpp.queue">GPP.Queue</a> to start.</p>

<p><em>Returns</em>: <strong>TRUE</strong> if the queue was started, <strong>FALSE</strong> if it was already.</p>

<div class='prototype_end'></div>

<p>Makes <strong>self</strong> start to route requests to available workers,
and check worker&rsquo;s liveness.</p>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
