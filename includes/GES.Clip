<!doctype html>
<html>
  <head>
    <meta charset="utf-8">
    <meta content="IE=edge,chrome=1" http-equiv="X-UA-Compatible">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=1">
    <title>API Documentation</title>

    <link href="../stylesheets/screen.css" rel="stylesheet" type="text/css" media="screen" />
    <link href="../stylesheets/print.css" rel="stylesheet" type="text/css" media="print" />
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js"></script>
      <script src="../javascripts/all_nosearch.js" type="text/javascript"></script>

  </head>

  <body class="includes includes_GES">
    <a href="#" id="nav-button">
      <span>
        NAV
        <img src="../images/navbar.png" />
      </span>
    </a>
    <div class="tocify-wrapper">
      <img src="../images/logo.png" />
      <div id="toc">
      </div>
    </div>
    <div class="page-wrapper">
      <div class="dark-box"></div>
      <div class="content">
        <h2 id="ges.clip" c_name="GESClip" python_name="GES.Clip">GES.Clip</h2>

<p>A <a href="#ges.clip">GES.Clip</a> is a &lsquo;natural&rsquo; object which controls one or more
<a href="#ges.trackelement">GES.TrackElement</a>(s) in one or more <a href="#ges.track">GES.Track</a>(s).</p>

<p>Keeps a reference to the <a href="#ges.trackelement">GES.TrackElement</a>(s) it created and
sets/updates their properties.</p>

<p><h3 id='DOgzIp' class='subsection'><u>GObject properties:</u></h3>
<h3 id="ges.clip-layer" c_name="GES.Clip-layer" python_name="GES.Clip-layer">GES.Clip-layer</h3></p>

<p>The GESLayer where this clip is being used. If you want to connect to its
notify signal you should connect to it with g_signal_connect_after as the
signal emission can be stop in the first fase.</p>

<h3 id="ges.clip-supported-formats" c_name="GES.Clip-supported-formats" python_name="GES.Clip-supported-formats">GES.Clip-supported-formats</h3>

<p>The formats supported by the clip.</p>

<h3 id='vmOuTd' class='subsection'><u>Methods:</u></h3>

<div class='prototype_start'></div>

<h3 id="ges.clip.add_asset" c_name="ges_clip_add_asset" python_name="GES.Clip.add_asset">GES.Clip.add_asset</h3>
<pre><code class="highlight c"><span class="n">GESTrackElement</span><span class="o">*</span> <span class="n">ges_clip_add_asset</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                     <span class="n">GESAsset</span><span class="o">*</span> <span class="n">asset</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Asset</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">TrackElement</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">add_asset</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">asset</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_add_asset()</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>asset</em>: a <a href="#ges.asset">GES.Asset</a> with (FIXME broken link)GES_TYPE_TRACK_ELEMENT as extractable_type</p>

<p><em>Returns</em>: Created <a href="#ges.trackelement">GES.TrackElement</a> or NULL
if an error happened</p>

<div class='prototype_end'></div>

<p>Extracts a <a href="#ges.trackelement">GES.TrackElement</a> from <strong>asset</strong> and adds it to the <strong>clip</strong>.
Should only be called in order to add operations to a <a href="#ges.clip">GES.Clip</a>,
ni other cases TrackElement are added automatically when adding the
<a href="#ges.clip">GES.Clip</a>/<a href="#ges.asset">GES.Asset</a> to a layer.</p>

<p>Takes a reference on @track_element.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.find_track_element" c_name="ges_clip_find_track_element" python_name="GES.Clip.find_track_element">GES.Clip.find_track_element</h3>
<pre><code class="highlight c"><span class="n">GESTrackElement</span><span class="o">*</span> <span class="n">ges_clip_find_track_element</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                              <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">,</span>
                                              <span class="n">GType</span> <span class="n">type</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">,</span> <span class="n">GType</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">TrackElement</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">find_track_element</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">track</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_find_track_element()</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>track</em>: a <a href="#ges.track">GES.Track</a> or NULL</p>

<p><em>type</em>: a <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> indicating the type of track element you are looking
for or %G_TYPE_NONE if you do not care about the track type.</p>

<p><em>Returns</em>: The <a href="#ges.trackelement">GES.TrackElement</a> used by <strong>track</strong>, else <strong>NULL</strong>,
Unref after usage</p>

<div class='prototype_end'></div>

<p>Finds the <a href="#ges.trackelement">GES.TrackElement</a> controlled by <strong>clip</strong> that is used in <strong>track</strong>. You
may optionally specify a GType to further narrow search criteria.</p>

<p>Note: If many objects match, then the one with the highest priority will be
returned.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.find_track_elements" c_name="ges_clip_find_track_elements" python_name="GES.Clip.find_track_elements">GES.Clip.find_track_elements</h3>
<pre><code class="highlight c"><span class="n">GList</span><span class="o">*</span> <span class="n">ges_clip_find_track_elements</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                     <span class="n">GESTrack</span><span class="o">*</span> <span class="n">track</span><span class="p">,</span>
                                     <span class="n">GESTrackType</span> <span class="n">track_type</span><span class="p">,</span>
                                     <span class="n">GType</span> <span class="n">type</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Track</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">TrackType</span><span class="p">,</span> <span class="n">GType</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">([</span><span class="n">GES</span><span class="o">.</span><span class="n">TrackElement</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">find_track_elements</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">track</span><span class="p">,</span> <span class="n">track_type</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_find_track_elements()</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>track</em>: a <a href="#ges.track">GES.Track</a> or NULL</p>

<p><em>track_type</em>: a <a href="#ges.tracktype">GES.TrackType</a> indicating the type of tracks in which elements
should be searched.</p>

<p><em>type</em>: a <a href="FIXME%20broken%20link%20to%20Type">GLib.Type</a> indicating the type of track element you are looking
for or %G_TYPE_NONE if you do not care about the track type.</p>

<p><em>Returns</em>: a <a href="https://developer.gnome.org/glib/unstable//glib-Doubly-Linked-Lists.html#GList">GLib.List</a> of the
<a href="#ges.trackelement">GES.TrackElement</a> contained in <strong>clip</strong>.
The refcount of the objects will be increased. The user will have to
unref each <a href="#ges.trackelement">GES.TrackElement</a> and free the <a href="https://developer.gnome.org/glib/unstable//glib-Doubly-Linked-Lists.html#GList">GLib.List</a>.</p>

<div class='prototype_end'></div>

<p>Finds all the <a href="#ges.trackelement">GES.TrackElement</a> controlled by <strong>clip</strong> that is used in <strong>track</strong>. You
may optionally specify a GType to further narrow search criteria.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.get_layer" c_name="ges_clip_get_layer" python_name="GES.Clip.get_layer">GES.Clip.get_layer</h3>
<pre><code class="highlight c"><span class="n">GESLayer</span><span class="o">*</span> <span class="n">ges_clip_get_layer</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_get_layer()</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>Returns</em>: The <a href="#ges.layer">GES.Layer</a> where this <strong>clip</strong> is being
used, or <strong>NULL</strong> if it is not used on any layer. The caller should unref it
usage.</p>

<div class='prototype_end'></div>

<p>Get the <a href="#ges.layer">GES.Layer</a> to which this clip belongs.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.get_supported_formats" c_name="ges_clip_get_supported_formats" python_name="GES.Clip.get_supported_formats">GES.Clip.get_supported_formats</h3>
<pre><code class="highlight c"><span class="n">GESTrackType</span> <span class="n">ges_clip_get_supported_formats</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">TrackType</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_supported_formats</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_get_supported_formats()</span>

</code></pre>

<p><em>clip</em>: the <a href="#ges.clip">GES.Clip</a></p>

<p><em>Returns</em>: The formats supported by <strong>clip</strong>.</p>

<div class='prototype_end'></div>

<p>Get the formats supported by <strong>clip</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.get_top_effect_index" c_name="ges_clip_get_top_effect_index" python_name="GES.Clip.get_top_effect_index">GES.Clip.get_top_effect_index</h3>
<pre><code class="highlight c"><span class="n">gint</span> <span class="n">ges_clip_get_top_effect_index</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                    <span class="n">GESBaseEffect</span><span class="o">*</span> <span class="n">effect</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">BaseEffect</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_top_effect_index</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_get_top_effect_index()</span>

</code></pre>

<p><em>clip</em>: The origin <a href="#ges.clip">GES.Clip</a></p>

<p><em>effect</em>: The <a href="#ges.baseeffect">GES.BaseEffect</a> we want to get the top index from</p>

<p><em>Returns</em>: The top index of the effect, -1 if something went wrong.</p>

<div class='prototype_end'></div>

<p>Gets the index position of an effect.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.get_top_effect_position" c_name="ges_clip_get_top_effect_position" python_name="GES.Clip.get_top_effect_position">GES.Clip.get_top_effect_position</h3>
<pre><code class="highlight c"><span class="n">gint</span> <span class="n">ges_clip_get_top_effect_position</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                       <span class="n">GESBaseEffect</span><span class="o">*</span> <span class="n">effect</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">BaseEffect</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">int</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">get_top_effect_position</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">effect</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_get_top_effect_position()</span>

</code></pre>

<p><em>clip</em>: FIXME empty description</p>

<p><em>effect</em>: FIXME empty description</p>

<p><em>Returns</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.clip.get_top_effects" c_name="ges_clip_get_top_effects" python_name="GES.Clip.get_top_effects">GES.Clip.get_top_effects</h3>
<pre><code class="highlight c"><span class="n">GList</span><span class="o">*</span> <span class="n">ges_clip_get_top_effects</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">([</span><span class="n">GES</span><span class="o">.</span><span class="n">TrackElement</span><span class="p">])</span>
<span class="k">def</span> <span class="nf">get_top_effects</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_get_top_effects()</span>

</code></pre>

<p><em>clip</em>: The origin <a href="#ges.clip">GES.Clip</a></p>

<p><em>Returns</em>: a <a href="https://developer.gnome.org/glib/unstable//glib-Doubly-Linked-Lists.html#GList">GLib.List</a> of the
<a href="#ges.baseeffect">GES.BaseEffect</a> that are applied on <strong>clip</strong> order by ascendant priorities.
The refcount of the objects will be increased. The user will have to
unref each <a href="#ges.baseeffect">GES.BaseEffect</a> and free the <a href="https://developer.gnome.org/glib/unstable//glib-Doubly-Linked-Lists.html#GList">GLib.List</a>.</p>

<div class='prototype_end'></div>

<p>Get effects applied on <strong>clip</strong></p>

<div class='prototype_start'></div>

<h3 id="ges.clip.move_to_layer" c_name="ges_clip_move_to_layer" python_name="GES.Clip.move_to_layer">GES.Clip.move_to_layer</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_clip_move_to_layer</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                 <span class="n">GESLayer</span><span class="o">*</span> <span class="n">layer</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">Layer</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">move_to_layer</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">layer</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_move_to_layer()</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>layer</em>: the new <a href="#ges.layer">GES.Layer</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if <strong>clip</strong> could be moved <strong>FALSE</strong> otherwize</p>

<div class='prototype_end'></div>

<p>Moves <strong>clip</strong> to <strong>layer</strong>. If <strong>clip</strong> is not in any layer, it adds it to
<strong>layer</strong>, else, it removes it from its current layer, and adds it to <strong>layer</strong>.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.set_supported_formats" c_name="ges_clip_set_supported_formats" python_name="GES.Clip.set_supported_formats">GES.Clip.set_supported_formats</h3>
<pre><code class="highlight c"><span class="kt">void</span> <span class="n">ges_clip_set_supported_formats</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                     <span class="n">GESTrackType</span> <span class="n">supportedformats</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">TrackType</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">none</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_supported_formats</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">supportedformats</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_set_supported_formats()</span>

</code></pre>

<p><em>clip</em>: the <a href="#ges.clip">GES.Clip</a> to set supported formats on</p>

<p><em>supportedformats</em>: the <a href="#ges.tracktype">GES.TrackType</a> defining formats supported by <strong>clip</strong></p>

<div class='prototype_end'></div>

<p>Sets the formats supported by the file.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.set_top_effect_index" c_name="ges_clip_set_top_effect_index" python_name="GES.Clip.set_top_effect_index">GES.Clip.set_top_effect_index</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_clip_set_top_effect_index</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                        <span class="n">GESBaseEffect</span><span class="o">*</span> <span class="n">effect</span><span class="p">,</span>
                                        <span class="n">guint</span> <span class="n">newindex</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">BaseEffect</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_top_effect_index</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">effect</span><span class="p">,</span> <span class="n">newindex</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_set_top_effect_index()</span>

</code></pre>

<p><em>clip</em>: The origin <a href="#ges.clip">GES.Clip</a></p>

<p><em>effect</em>: The <a href="#ges.baseeffect">GES.BaseEffect</a> to move</p>

<p><em>newindex</em>: the new index at which to move the <strong>effect</strong> inside this
<a href="#ges.clip">GES.Clip</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> if <strong>effect</strong> was successfuly moved, <strong>FALSE</strong> otherwise.</p>

<div class='prototype_end'></div>

<p>This is a convenience method that lets you set the index of a top effect.</p>

<div class='prototype_start'></div>

<h3 id="ges.clip.set_top_effect_priority" c_name="ges_clip_set_top_effect_priority" python_name="GES.Clip.set_top_effect_priority">GES.Clip.set_top_effect_priority</h3>
<pre><code class="highlight c"><span class="n">gboolean</span> <span class="n">ges_clip_set_top_effect_priority</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                           <span class="n">GESBaseEffect</span><span class="o">*</span> <span class="n">effect</span><span class="p">,</span>
                                           <span class="n">guint</span> <span class="n">newpriority</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="n">GES</span><span class="o">.</span><span class="n">BaseEffect</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="nb">bool</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">set_top_effect_priority</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">effect</span><span class="p">,</span> <span class="n">newpriority</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_set_top_effect_priority()</span>

</code></pre>

<p><em>clip</em>: FIXME empty description</p>

<p><em>effect</em>: FIXME empty description</p>

<p><em>newpriority</em>: FIXME empty description</p>

<p><em>Returns</em>: FIXME empty description</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.clip.split" c_name="ges_clip_split" python_name="GES.Clip.split">GES.Clip.split</h3>
<pre><code class="highlight c"><span class="n">GESClip</span><span class="o">*</span> <span class="n">ges_clip_split</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                         <span class="n">guint64</span> <span class="n">position</span><span class="p">);</span>

</code></pre>
<pre><code class="highlight python"><span class="nd">@accepts</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">,</span> <span class="nb">int</span><span class="p">)</span>
<span class="nd">@returns</span><span class="p">(</span><span class="n">GES</span><span class="o">.</span><span class="n">Clip</span><span class="p">)</span>
<span class="k">def</span> <span class="nf">split</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">position</span><span class="p">):</span>
    <span class="c"># Python wrapper for ges_clip_split()</span>

</code></pre>

<p><em>clip</em>: the <a href="#ges.clip">GES.Clip</a> to split</p>

<p><em>position</em>: a <a href="http://gstreamer.freedesktop.org/data/doc/gstreamer/head/gstreamer/html//GstClock.html#GstClockTime">Gst.ClockTime</a> representing the position at which to split</p>

<p><em>Returns</em>: The newly created <a href="#ges.clip">GES.Clip</a> resulting from the
splitting</p>

<div class='prototype_end'></div>

<p>The function modifies <strong>clip</strong>, and creates another <a href="#ges.clip">GES.Clip</a> so
we have two clips at the end, splitted at the time specified by <strong>position</strong>.
The newly created clip will be added to the same layer as <strong>clip</strong> is in.
This implies that <strong>clip</strong> must be in a <a href="#ges.layer">GES.Layer</a> for the operation to
be possible.</p>

<h3 id='RXdmck' class='subsection'><u>Virtual Methods:</u></h3>

<div class='prototype_start'></div>

<h3 id="ges.clip.do_create_track_element" c_name="GESClipClass:create_track_element">GES.Clip.do_create_track_element</h3>
<pre><code class="highlight c"><span class="n">GESTrackElement</span><span class="o">*</span> <span class="n">GESClipClass</span><span class="o">-&gt;</span><span class="n">create_track_element</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                             <span class="n">GESTrackType</span> <span class="n">type</span><span class="p">);</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>type</em>: a <a href="#ges.tracktype">GES.TrackType</a></p>

<p><em>Returns</em>: the <a href="#ges.trackelement">GES.TrackElement</a> to be used, or <strong>NULL</strong> if it can&rsquo;t provide one
for the given @track.</p>

<div class='prototype_end'></div>

<div class='prototype_start'></div>

<h3 id="ges.clip.do_create_track_elements" c_name="GESClipClass:create_track_elements">GES.Clip.do_create_track_elements</h3>
<pre><code class="highlight c"><span class="n">GList</span><span class="o">*</span> <span class="n">GESClipClass</span><span class="o">-&gt;</span><span class="n">create_track_elements</span> <span class="p">(</span><span class="n">GESClip</span><span class="o">*</span> <span class="n">clip</span><span class="p">,</span>
                                    <span class="n">GESTrackType</span> <span class="n">type</span><span class="p">);</span>

</code></pre>

<p><em>clip</em>: a <a href="#ges.clip">GES.Clip</a></p>

<p><em>type</em>: a <a href="#ges.tracktype">GES.TrackType</a></p>

<p><em>Returns</em>: <strong>TRUE</strong> on success <strong>FALSE</strong> on failure.</p>

<div class='prototype_end'></div>

      </div>
      <div class="dark-box">
      </div>
    </div>
  </body>
</html>
